#LyX 1.6.4.1 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass book
\begin_preamble
\usepackage{hyperref}

\let\myUrl\url
\renewcommand{\url}[1]{(\myUrl{#1})}

\raggedbottom
\end_preamble
\use_default_options false
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\secnumdepth 3
\tocdepth 5
\paragraph_separation indent
\defskip medskip
\quotes_language swedish
\papercolumns 1
\papersides 2
\paperpagestyle headings
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename figures/snac_cover.pdf
	width 75page%

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\end_layout

\begin_layout Title
SNAC User Manual
\end_layout

\begin_layout Author
Â© California Institute of Technology
\begin_inset Newline newline
\end_inset

Version 1.2
\end_layout

\begin_layout Date
\noindent
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
today
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph*
About the cover:
\end_layout

\begin_layout Standard
Pictured is the plastic strain distribution over a deformed block of elasto-plas
tic material.
 While similar to the example problem in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Example-1:-Rifting"

\end_inset

, the domain is larger (100
\begin_inset space ~
\end_inset


\begin_inset Formula $\times$
\end_inset


\begin_inset space ~
\end_inset

20
\begin_inset space ~
\end_inset


\begin_inset Formula $\times$
\end_inset


\begin_inset space ~
\end_inset

100 km) and a distributed loading is applied on the bottom surface to simulate
 an oblique rifting.
 The warped surface on top of the domain represents 10 times exaggerated
 surface topography, and the relief between the highest and the lowest point
 is about 1
\begin_inset space ~
\end_inset

km.
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList figure

\end_inset


\end_layout

\begin_layout Part
Preface
\end_layout

\begin_layout Chapter*
Preface
\end_layout

\begin_layout Section*
About This Document
\end_layout

\begin_layout Standard
This document is organized into three parts.
 Part I consists of traditional book front matter, including this preface.
 Part II begins with an introduction to Pyre and the Pyre-compatible version
 of SNAC and their capabilities and proceeds to the details of implementation.
 Part III provides appendices and references.
 
\end_layout

\begin_layout Standard
The style of this publication is based on the Apple Publications Style Guide
 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

developer.apple.com/documentation/UserExperience/Conceptual/APStyleGuide/AppleStyl
eGuide2003.pdf
\end_layout

\end_inset

, as recommended by Python.org 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

www.python.org
\end_layout

\end_inset

.
 The documentation was produced using LyX 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

www.lyx.org
\end_layout

\end_inset

 to facilitate the transformation of files from one format to another.
 LyX is a document processor that encourages an approach to writing based
 on the structure of your documents, not their appearance.
 It is released under a Free Software/Open Source license.
\end_layout

\begin_layout Standard
Errors and bug fixes in this manual should be directed to the CIG Long-Term
 Tectonics Mailing List 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

cig-long@geodynamics.org
\end_layout

\end_inset

.
\end_layout

\begin_layout Section*
Who Will Use This Document
\end_layout

\begin_layout Standard
This documentation is aimed at scientists who prefer to use prepackaged
 and specialized analysis tools.
 Users are likely to be experienced computational earth scientists and have
 familiarity with basic scripting, software installation, and programming;
 but are not likely to be professional programmers.
 Of those, there are likely to be two classes of users: those who just run
 models and those who modify the source code.
\end_layout

\begin_layout Section*
Citation
\end_layout

\begin_layout Standard
Computational Infrastructure for Geodynamics (CIG) is making this source
 code available to you in the hope that the software will enhance your research
 in geophysics.
 A number of individuals have contributed a significant portion of their
 careers toward the development of SNAC.
 It is essential that you recognize these individuals in the normal scientific
 practice by citing the appropriate peer reviewed papers and making appropriate
 acknowledgements.
 
\end_layout

\begin_layout Standard
The SNAC development team asks that you cite 
\end_layout

\begin_layout Itemize
Choi, E., L.
 Lavier, and M.
 Gurnis (2008), Thermomechanics of mid-ocean ridge segmentation, 
\emph on
Phys.
 Earth Planet.
 Inter.,
\emph default
 171, 374-386, 
\emph on

\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

dx.doi.org/10.1016/j.pepi.2008.08.010
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
The developers also request that in your oral presentations and in your
 paper acknowledgements that you indicate your use of this code, the authors
 of the code, and CIG 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

geodynamics.org
\end_layout

\end_inset

.
\end_layout

\begin_layout Section*
Support
\end_layout

\begin_layout Standard
SNAC development is funded by the U.S.
 Dept.
 of Energy's Advanced Simulation and Computing program 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

www.sandia.gov/NNSA/ASC
\end_layout

\end_inset

 and the National Science Foundation's 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

www.nsf.gov
\end_layout

\end_inset

 Information Technology Research (ITR) program (grant #0205653).
 Continued support of SNAC is based upon work supported by the National
 Science Foundation under Grant No.
 EAR-0406751.
 Any opinions, findings, and conclusions or recommendations expressed in
 this material are those of the authors and do not necessarily reflect the
 views of the National Science Foundation.
\end_layout

\begin_layout Part
Chapters
\end_layout

\begin_layout Chapter
Introduction
\end_layout

\begin_layout Standard
SNAC (StGermaiN Analysis of Continua) is an updated Lagrangian explicit
 finite difference code for modeling a finitely deforming elasto-visco-plastic
 solid in 3D, released under the GNU General Public License (see Chapter
 
\begin_inset CommandInset ref
LatexCommand vref
reference "cha:License"

\end_inset

).
 In this code, nodal velocities satisfying a weak-form of the momentum balance
 are obtained as the nodal solution.
 SNAC shares a mathematical foundation, and thus major advantages, with
 a standard finite element method (FEM).
 However, it departs from the FEM by not making explicit use of shape functions.
 A Cartesian mesh consisting of 4-node linear or constant-strain tetrahedral
 elements is used to represent a discretized domain, although a spherical
 domain can also be used.
 On top of the tetrahedral discretization, a coarser discretization is construct
ed by zones, which are defined by eight nodes like a hexhedral element in
 the standard FEM and subdivided into two layouts of five tetrahedral elements
 for symmetric response.
 To avoid the over-stiff response of tetrahedrons in the incompressible
 limit, mixed discretization is applied 
\begin_inset CommandInset citation
LatexCommand cite
key "MartCund1982"

\end_inset

.
 The mixed discretization relieves over-stiffness by replacing the first
 invariant of tetrahedral strain-rate tensor with the one averaged over
 a zone.
\end_layout

\begin_layout Section
SNAC Implementation
\end_layout

\begin_layout Subsection
Governing Equations 
\end_layout

\begin_layout Standard
Momentum balance for continuum in current or deformed configuration is as
 given below:
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
\begin{array}{c}
\frac{\partial\sigma_{ij}}{\partial x_{j}}+\rho g_{i}=\rho\frac{Dv_{i}}{Dt},\,\, in\,\,\Omega,\\
v_{i}=g_{i}\,\, on\,\,\Gamma_{g},\\
t_{i}=h_{i}\,\, on\,\,\Gamma_{h},\end{array}\label{eq:Momentum balance for continuum}\end{equation}

\end_inset

where 
\begin_inset Formula $\partial\Omega$
\end_inset

, the domain boundary, is the union of disjoint subsets, 
\begin_inset Formula $\Gamma_{h}$
\end_inset

 and 
\begin_inset Formula $\Gamma_{g}$
\end_inset

, 
\begin_inset Formula $\sigma_{ij}$
\end_inset

, 
\begin_inset Formula $g_{i}$
\end_inset

, and 
\begin_inset Formula $v_{i}$
\end_inset

 are components of the Cauchy stress tensor, the gravitational acceleration,
 and the velocity components, respectively.
 
\begin_inset Formula $\frac{D}{Dt}$
\end_inset

 is the material or total derivative, and equal to the partial derivative
 with respect to time in SNAC since the updated Lagrangian viewpoint is
 taken.
 
\end_layout

\begin_layout Subsection
Spatial Descritization
\end_layout

\begin_layout Standard
A 3D domain is discretized into hexahedral elements, each of which is filled
 with two sets of 5 tetrahedra (Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:snac_mesh"

\end_inset

a).
 In this mesh hierarchy, called the mixed discretization 
\begin_inset CommandInset citation
LatexCommand cite
key "MartCund1982"

\end_inset

, hexahedral elements are used mostly as an averaging unit for volumetric
 strain.
 The averaging is enforced at all times although needed only for incompressible
 viscoelastic or plastic constitutive laws.
 This is a conservative choice and does influence the overall performance
 of SNAC.
 The use of two equivalent sets of tetrahedra is required to ensure a symmetric
 response.
 For a given loading, responses of one set of tetrahedra can be different
 from those of the other set because of the differently orientated faces
 of tetrahedra in each set, e.g.
 
\begin_inset CommandInset citation
LatexCommand cite
key "Zien_etal1995"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename figures/snac-mesh.pdf
	scale 60

\end_inset

 
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:snac_mesh"

\end_inset

Configurations of tetrahedra and conventions for the notation.
 (a) Two configurations of five tetrahedra in a hexahedral element used
 in the mixed discretization.
 Numbers next to apexes indicate the local node numbering.
 (b) Conventions for the notation.
 
\begin_inset Formula $A_{l}$
\end_inset

 and 
\begin_inset Formula $n_{l}$
\end_inset

 denote the face and the unit normal vector, respectively, associated with
 a local node 
\begin_inset Formula $l$
\end_inset

.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Approximation of Partial Derivatives
\end_layout

\begin_layout Standard
The approximation of partial derivatives with respect to spatial variables
 follows the integral definitions, e.g., 
\begin_inset CommandInset citation
LatexCommand cite
key "Wilkins1964"

\end_inset

: 
\begin_inset Formula \begin{equation}
\int_{\Omega}f_{,i}dV=\int_{\partial\Omega}fn_{i}d\Gamma,\label{eq:partialapprox}\end{equation}

\end_inset

where 
\shape italic

\begin_inset Formula $\Omega$
\end_inset


\shape default
 represent a tetrahedron as an integration domain, 
\shape italic

\begin_inset Formula $\partial\Omega$
\end_inset


\shape default
 is the boundary surfaces of the tetrahedron, 
\begin_inset Formula $f_{,i}$
\end_inset

 is the partial derivative of a variable 
\begin_inset Formula $f$
\end_inset

 with respect to 
\begin_inset Formula $i$
\end_inset

-th spatial coordinate, 
\begin_inset Formula $n_{i}$
\end_inset

 is the 
\begin_inset Formula $i$
\end_inset

-th component of the unit normal vector of the surface.
 If the partial derivative is constant within a tetrahedron, it is evaluated
 as 
\begin_inset Formula \begin{equation}
f_{,i}=\frac{1}{V}\int_{\partial\Omega}fn_{i}d\Gamma,\label{eq:def_fi}\end{equation}

\end_inset

where 
\begin_inset Formula $V$
\end_inset

 is the volume of the tetrahedron.
 By further substituting an algebraic expression for the surface integral,
 reordering terms, and using 
\begin_inset Formula $\int_{\partial\Omega}n_{i}d\Gamma=0$
\end_inset

 (when 
\begin_inset Formula $f=1$
\end_inset

 in Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:def_fi"

\end_inset

), 
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{align}
f_{,i} & =\frac{1}{V}\sum_{l=1}^{4}\bar{f}^{l}n_{i}^{l}A^{l}=\frac{1}{V}\sum_{l=1}^{4}\frac{1}{3}\sum_{m=1,\neq l}^{4}f^{m}n_{i}^{l}A^{l}\nonumber \\
 & =\frac{1}{3V}\sum_{m=1}^{4}f^{m}\sum_{l=1,\neq m}^{4}n_{i}^{l}A^{l}\nonumber \\
 & =-\frac{1}{3V}\sum_{m=1}^{4}f^{m}n_{i}^{m}A^{m},\label{eq:formula_fi}\end{align}

\end_inset

where 
\begin_inset Formula $l$
\end_inset

 is the local node index varying from 1 to 4, 
\begin_inset Formula $A^{l}$
\end_inset

 and 
\begin_inset Formula $n^{l}$
\end_inset

 are the area and the unit normal vector of the triangular surface not having
 the node 
\begin_inset Formula $l$
\end_inset

 as one of its apexes (Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:snac_mesh"

\end_inset

b).
 Hereafter, we call such a face a 
\emph on
corresponding
\emph default
 face to node 
\begin_inset Formula $l$
\end_inset

.
 
\begin_inset Formula $\bar{f}^{l}$
\end_inset

 is the averaged 
\begin_inset Formula $f$
\end_inset

 on the surface 
\begin_inset Formula $l$
\end_inset

.
\end_layout

\begin_layout Subsection
Nodal Assemblage
\end_layout

\begin_layout Standard
We can convert the differential equation for momentum balance (Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:Momentum balance for continuum"

\end_inset

) (the following description is applied to the heat equation in the same
 fashion) to a principle of minimum work rate as in the standard finite
 element formulation: 
\begin_inset Formula \begin{equation}
\int_{\Omega}\delta v_{i}\rho\frac{Dv_{i}}{Dt}dV=\int_{\Omega}\delta v_{i}\rho g_{i}dV+\int_{\Omega}\delta\xi_{ij}\sigma_{ij}dV,\label{eq:momentumweak}\end{equation}

\end_inset

where 
\shape italic

\begin_inset Formula $\xi_{ij}$
\end_inset


\shape default
 are components of the strain rate tensor, 
\shape italic

\begin_inset Formula $\delta v_{i}$
\end_inset


\shape default
 and 
\shape italic

\begin_inset Formula $\delta\xi_{ij}$
\end_inset


\shape default
 represent variations of velocity and strain rate, and 
\shape italic

\begin_inset Formula $\Omega$
\end_inset


\shape default
 here corresponds to the whole domain.
 The local contribution to nodes corresponding to each term can be computed
 by following the standard finite element procedure for linear tetrahedral
 elements.
 However, our method does not need to construct coefficient matrices such
 as mass and stiffness matrices since it adopts an explicit time discretization.
 The resultant momentum equation is 
\begin_inset Formula \begin{equation}
M^{n}\frac{Dv_{i}^{n}}{Dt}=\frac{1}{3}T_{i}^{[n]}+\frac{1}{4}\rho^{[n]}g_{i}V^{[n]},\label{eq:momentumdiscrete}\end{equation}

\end_inset

where the superscript 
\begin_inset Formula $n$
\end_inset

 represents values evaluated at the global node 
\begin_inset Formula $n$
\end_inset

, the superscript 
\begin_inset Formula $[n]$
\end_inset

 means the sum of contributions from all the tetrahedra having the global
 node n as an apex, 
\begin_inset Formula $T_{i}$
\end_inset

 is the traction that is defined as 
\shape italic

\begin_inset Formula $\sigma_{ij}n_{j}$
\end_inset


\shape default
 and evaluated on a face of one of the contributing tetrahedra.
 Any applied traction boundary conditions should be explicitly computed
 and added on the right hand side of (Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:momentumdiscrete"

\end_inset

).
 The nodal mass 
\begin_inset Formula $M^{n}$
\end_inset

 is not the actual inertial mass but an adjusted one to satisfy a local
 stability criterion discussed in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:mass-scaling"

\end_inset

.
 The correspondence between an apex and a face for the traction calculation
 is determined as in the derivation of the expression, (Eq.
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "eq:formula_fi"

\end_inset

).
 Note that the factor of 
\begin_inset Formula $\frac{1}{3}$
\end_inset

 in the traction term is inherited from Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:formula_fi"

\end_inset

, and the factor of 
\begin_inset Formula $\frac{1}{4}$
\end_inset

 in the body force term implies that the nodal contribution takes one quarter
 of a tetrahedron's volume-dependent quantity.
\end_layout

\begin_layout Standard
While looping over the entire set of nodes, mass and nodal forces are assembled
 by adding up the contributions from boundary conditions and all the tetrahedra
 sharing that node as one of their apexes.
 The structured mesh of SNAC renders the assemblage step conveniently static.
 The acquired net force (or heat flux) at each node is used to update velocities
 and node coordinates (or temperature).
\end_layout

\begin_layout Subsection
Solution Scheme 
\end_layout

\begin_layout Standard
We seek static or quasi-static solutions through a dynamic relaxation method.
 Instead of adding a usual velocity-dependent friction term, we adopt a
 local non-viscous damping scheme 
\begin_inset CommandInset citation
LatexCommand cite
key "Cundall_1987"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
F_{i}^{damped}=F_{i}-\alpha\,\mathrm{sgn}\left(v_{i}\right)\mid F_{i}\mid\,,\label{eq:forcedamped}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\noindent
where 
\begin_inset Formula $F_{i}$
\end_inset

 is the 
\begin_inset Formula $i$
\end_inset

-th component of the residual force vector (the right hand side of Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:momentumdiscrete"

\end_inset

), 
\shape italic

\begin_inset Formula $\alpha$
\end_inset


\shape default
 is a positive coefficient less than 1, sgn
\begin_inset Formula $(v_{i})$
\end_inset

 returns the sign of the 
\begin_inset Formula $i$
\end_inset

-th component of velocity, 
\begin_inset Formula $v_{i}$
\end_inset

.
 Once net forces are assembled and damped, velocity at that node is updated
 using a forward Euler method: 
\begin_inset Formula \begin{equation}
v(t+\frac{\Delta t}{2})=v(t-\frac{\Delta t}{2})+\Delta t\frac{F_{i}^{damped}}{M}\label{eq:velupdate}\end{equation}

\end_inset

 
\begin_inset Formula \begin{equation}
x(t+\Delta t)=x(t)+\Delta tv(t+\frac{\Delta t}{2}).\label{eq:posupdate}\end{equation}

\end_inset

Damping is irrelevant to the update of temperature field, but the same forward
 Euler method is used.
\end_layout

\begin_layout Standard
\noindent
There are a couple of SNAC-specific numerical artifacts.
 First, as in the case of an under-damped oscillator, SNAC's solutions will
 exhibit artificial oscillations, but these are only transient and do not
 affect the static equilibrium.
 Another notable artifact is the randomness in the magnitude of residual
 forces.
 Suppose the magnitude of assembled residual force is very small compared
 to those of the contributing internal and external forces.
 It means that many significant figures in floating-point numbers are lost
 during the assemblage.
 The residual force ends up with having random numbers in the floating number
 corresponding to it.
 This is related to a fundamental issue of representing real numbers with
 floating point numbers.
\end_layout

\begin_layout Subsection
Mass Scaling for Numerical Stability
\begin_inset CommandInset label
LatexCommand label
name "sub:mass-scaling"

\end_inset


\end_layout

\begin_layout Standard
The conventional Courant-Friedrichs-Lewy (CFL) condition imposes a stringent
 upper limit for the time step size such that dynamic relaxation takes a
 long time to get the quasi-static solution over a geological time scale.
 To overcome this limit, a mass scaling technique is applied.
 This technique adjusts each nodal mass such that the stability condition
 for a user-specified time step can be locally satisfied.
 The stability condition to be satisfied, however, is not the same as in
 the CFL condition, i.e., 
\shape italic

\begin_inset Formula $\Delta t$
\end_inset


\shape default
 
\begin_inset Formula $\leq$
\end_inset

 (
\begin_inset Formula $l_{min}/v_{p}$
\end_inset

), where 
\shape italic

\begin_inset Formula $\Delta t$
\end_inset


\shape default
 is the time step, 
\begin_inset Formula $l_{min}$
\end_inset

 is the minimum element size, and 
\begin_inset Formula $v_{p}$
\end_inset

 is the P wave velocity.
 Instead, through an analogy of continuum to an infinite mass-spring system,
 we use a criterion that does not explicitly include length scale and P
 wave velocity; see Chapter 9 in Bathe 
\begin_inset CommandInset citation
LatexCommand cite
key "Bathe_1996"

\end_inset

: 
\begin_inset Formula \begin{equation}
\Delta t\leq\frac{T}{\pi},\label{eq:dtcrit}\end{equation}

\end_inset

where 
\begin_inset Formula $T$
\end_inset

 is the period of system, 
\begin_inset Formula $2\pi(m/k)^{1/2}$
\end_inset

, 
\begin_inset Formula $m$
\end_inset

 is a point mass, and 
\begin_inset Formula $k$
\end_inset

 is the stiffness of the spring attached to the point mass.
 Now, reducing the infinite series of mass and springs in one dimension
 to a single mass-spring system, the stiffness of that single system becomes
 
\begin_inset Formula $4k$
\end_inset

, leading to an expression for the mass scaling: 
\begin_inset Formula \begin{equation}
m\geq k(\Delta t)^{2}.\label{eq:critmass}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
For a given size of 
\begin_inset Formula $\Delta t$
\end_inset

, the nodal mass is adjusted according to Eq.
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "eq:critmass"

\end_inset

 to automatically satisfy the stability criterion, Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:dtcrit"

\end_inset

.
 The value of 
\begin_inset Formula $k$
\end_inset

 is computed by equating internal force contribution at a node with 
\begin_inset Formula $-ku_{i}$
\end_inset

: 
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{align}
 & \frac{1}{3}T_{i}=-ku_{i}\nonumber \\
\Rightarrow & \frac{1}{3}\left(\lambda+2\mu\right)\left(\dot{\epsilon_{ii}}dt\right)n_{i}A=-k\left(v_{i}dt\right)\,\,(\mathrm{no\, sum}),\label{eq:eqfork}\end{align}

\end_inset

where only the volumetric contribution from internal forces is taken into
 account.
 By substituting the approximation (Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:formula_fi"

\end_inset

) for the partial derivative, 
\begin_inset Formula $\dot{\epsilon_{ii}}$
\end_inset

, into the above equation and dividing both sides by 
\begin_inset Formula $v_{i}dt$
\end_inset

, we obtain 
\begin_inset Formula \begin{equation}
k_{i}^{l}=\frac{1}{9V}(\lambda+2\mu)(n_{i}^{l}A^{l})^{2},\label{eq:kdef}\end{equation}

\end_inset

where 
\begin_inset Formula $l$
\end_inset

 is the local index for apexes of a tetrahedron, and the surface-related
 quantities are computed on the corresponding face of the tetrahedron.
 Finally, a tetrahedron's contribution to the scaled mass is given as 
\begin_inset Formula \begin{equation}
m^{l}=\frac{\lambda+2\mu}{9V}\max[(n_{i}^{l}A^{l})^{2},i=1,\dots,3].\label{eq:scaledmass}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
As in the standard FEM, appropriate mappings between local and global indices
 are required.
\end_layout

\begin_layout Subsection
Constitutive Update
\end_layout

\begin_layout Standard
SNAC uses a general elasto-visco-plastic rheological model to update the
 Cauchy stress tensor (e.g., 
\begin_inset CommandInset citation
LatexCommand cite
key "Albe_etal2000"

\end_inset

).
 First, the initial guess of stress is acquired by the Maxwell viscoelastic
 constitutive law 
\begin_inset CommandInset citation
LatexCommand cite
key "Poli_etal1993a"

\end_inset

.
 If this initial guess exceeds a given yield stress, it is projected onto
 the yield surface using a return mapping method 
\begin_inset CommandInset citation
LatexCommand cite
key "SimoHugh2004"

\end_inset

; otherwise, the viscoelastic stress update is retained.
 This elasto-visco-plastic model can deal with various constitutive laws
 that are typically used for the Earth's crustal and mantle material as
 its limiting cases.
 For example, elastic, viscoelastic and elastoplastic material are realized
 in the following cases: 
\end_layout

\begin_layout Enumerate
Elastic material corresponds to the limit of infinite viscosity and yield
 stress.
 
\end_layout

\begin_layout Enumerate
Viscoelastic material corresponds to the limit of infinite yield strength.
 
\end_layout

\begin_layout Enumerate
Elasoplastic material corresponds to the inifinte viscosity.
 
\end_layout

\begin_layout Standard
Using the viscoplastic rheology is physically more realistic than using
 one of the limiting cases listed above since all materials have dissipative
 mechanisms and hence viscosity.
 This viscosity also provides a length scale for the problem of localization,
 which in turn enables a physically meaningful mesh independent solution
 when the mesh size is smaller than this length scale.
\end_layout

\begin_layout Standard
Since the nodal variables are velocities and whose spatial gradients are
 deformation rates, we formulate the constitutive update in terms of strain
 rate.
 The objective stress rate of choice is the Jaumann or the corotational
 stress rate (
\begin_inset Formula $\Delta\sigma^{\Delta J}$
\end_inset

) 
\begin_inset CommandInset citation
LatexCommand cite
key "RudnRice1975"

\end_inset

.
 
\begin_inset Formula \begin{equation}
\Delta\sigma^{\Delta J}=\frac{\partial(\Delta\sigma)}{\partial t}-W\cdot\Delta\sigma-\Delta\sigma\cdot W^{T},\label{eq:corotstress}\end{equation}

\end_inset

 where 
\begin_inset Formula $W_{ij}=(1/2)(\partial v_{i}/\partial x_{j}$
\end_inset

-
\begin_inset Formula $\partial v_{j}/\partial x_{i})$
\end_inset

 are the components of spin tensor and 
\begin_inset Formula $\Delta\sigma$
\end_inset

 is the increment of stress tensor.
 Correction to the stresses due to rotation can be given as 
\begin_inset Formula \begin{equation}
\sigma^{t+\Delta t}=\sigma^{t}+\Delta\sigma^{\Delta J}.\Delta t\label{eq:stressupdate}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
During the viscoplastic constitutive update, the initial guess of stress
 increment is first predicted by Maxwell viscoelastic constitutive law.
 If the guessed stress increment exceeds a given yield criterion, it is
 projected onto the yield surface using a return mapping method; otherwise,
 the viscoelastic stress update is kept.
 The detailed algorithm of stress update at each quadrature point and each
 time step is as follows: 
\end_layout

\begin_layout Enumerate
Viscoelastic predictor:
\series bold
 
\series default
Obtain viscoelastic stress increment predictor with Maxwell constitutive
 update corresponding to the strain increment.
 Since viscous relaxation affects only the deviatoric part of stress, the
 deviatoric stress update is given by 
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Formula \begin{equation}
S_{ij}^{n+1}=\left(C_{1}S_{ij}^{n}+2G\Delta\varepsilon_{ij}^{d}\right)C_{2}\label{eq:deviatoric stress update}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $S_{IJ}\left(=\sigma_{ij}-\frac{1}{3}\delta_{ij}\sigma_{kk}\right)$
\end_inset

 is the deviatoric stress, 
\begin_inset Formula $\varepsilon_{ij}^{d}$
\end_inset

 is the deviatoric part of the strain increment 
\begin_inset Formula $\varepsilon_{ij}\left(\varepsilon_{ij}=\frac{D\varepsilon_{ij}}{Dt}\Delta t\right),\,\, C_{1}=1-\frac{G\Delta t}{2\eta},\,\, C_{2}=\frac{1}{1+\frac{G\Delta t}{2\eta}}$
\end_inset

 and 
\begin_inset Formula $G$
\end_inset

 is the shear modulus.
 Volumetric elastic stress increment is given by 
\begin_inset Formula $\Delta\sigma_{kk}=3K\Delta\varepsilon_{kk}$
\end_inset

 which gives viscoelastic predictor update at 
\begin_inset Formula $t_{n+1}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
\sigma_{ij}^{n+1}=S_{ij}^{n+1}+\frac{1}{3}\left(\sigma_{kk}^{n}+\Delta\sigma_{kk}\right)\label{eq:viscoelastic predictor update}\end{equation}

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Plastic correction: If 
\begin_inset Formula $\sigma^{n+1}$
\end_inset

 is inside or on the yield surface, i.e., 
\begin_inset Formula $f\left(\sigma^{n+1}\right)\geq0,$
\end_inset

 where 
\begin_inset Formula $f$
\end_inset

 is the yield function, then it does not need plastic correction.
 If 
\begin_inset Formula $\sigma^{n+1}$
\end_inset

 is outside the yield surface, then yielding occurs and we project 
\begin_inset Formula $\sigma^{n+1}$
\end_inset

 onto the yield surface using a return-mapping algorithm 
\begin_inset CommandInset citation
LatexCommand cite
key "SimoHugh2004"

\end_inset

.
\end_layout

\begin_layout Standard
In general, for frictional materials, the yield function can be written
 as 
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
f\left(\sigma^{n+1}\right)=q_{\phi}\sigma_{p}+C-\tau\label{eq:frictional materials yield}\end{equation}

\end_inset

in which 
\begin_inset Formula $\tau$
\end_inset

 represents shear stress and 
\begin_inset Formula $\sigma_{p}$
\end_inset

 represents normal stress, 
\begin_inset Formula $q_{\phi}$
\end_inset

 is a function of the friction angle 
\begin_inset Formula $\phi$
\end_inset

, and 
\begin_inset Formula $C$
\end_inset

 is cohesive strength of the material.
 
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/MohrCoulomb_sigmatau.pdf
	width 7cm

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:MC yield envelop in sigma-tau"

\end_inset

A diagram showing a Mohr-Coulomb yield envelope with 
\begin_inset Formula $\tan\phi=0.6$
\end_inset

 and a non-zero cohesion as well as a Mohr circle corresponding to the principal
 stresses, 
\begin_inset Formula $\sigma_{1}$
\end_inset

 and 
\begin_inset Formula $\sigma_{3}$
\end_inset

.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the case of Mohr-Coulomb material, 
\begin_inset Formula $q_{\phi}$
\end_inset

 is given as 
\begin_inset Formula $\tan\phi$
\end_inset

, 
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
\tau=\frac{1}{2}\left(\sigma_{3}-\sigma_{1}\right)\cos\phi\text{ and }\sigma_{p}=\frac{1}{2}\left(\sigma_{3}+\sigma_{1}\right)-\frac{1}{2}\left(\sigma_{3}-\sigma_{1}\right)\sin\phi,\label{eq:Mohr-Coulomb material}\end{equation}

\end_inset

where 
\begin_inset Formula $\sigma_{1}\leq\sigma_{2}\leq\sigma_{3}$
\end_inset

 are the principal stresses of stress tensor (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:MC yield envelop in sigma-tau"

\end_inset

).
 The actual form of the yield function for 
\emph on
shear failure
\emph default
 used in SNAC is
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
f_{s}(\sigma_{1},\sigma_{3})=\sigma_{1}-N_{\phi}\sigma_{3}+2C\sqrt{N_{\phi}},\label{eq:Mohr-Coulomb yield function}\end{equation}

\end_inset

where 
\begin_inset Formula $N_{\phi}=\frac{1+\sin\phi}{1-\sin\phi}$
\end_inset

 and 
\begin_inset Formula $\sqrt{N_{\phi}}=\frac{\cos\phi}{1-\sin\phi}$
\end_inset

 (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:MC yield envelop in S1-S3"

\end_inset

).
 The tensile yield function is defined as
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
f_{t}(\sigma_{3})=\sigma_{3}-\sigma_{t},\label{eq:Mohr-Coulomb tensile yield function}\end{equation}

\end_inset

where 
\begin_inset Formula $\sigma_{t}$
\end_inset

 is the tension cut-off.
 If the tension cut-off is given as a parameter, a smaller value between
 the theoretical limit, 
\begin_inset Formula $2C/\tan\phi$
\end_inset

, and the given value is assigned to 
\begin_inset Formula $\sigma_{t}$
\end_inset

.
 To make sure a unique decision on the mode of yielding, shear vs.
 tensile, we define additional function, 
\begin_inset Formula $h(\sigma_{1},\sigma_{3})$
\end_inset

, which bisects the obtuse angle made by two yield functions (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:MC yield envelop in S1-S3"

\end_inset

) as
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
f_{h}(\sigma_{1},\sigma_{3})=\sigma_{3}-\sigma_{t}+(\sqrt{N_{\phi}^{2}+1}+N_{\phi})(\sigma_{1}-N_{\phi}\sigma_{t}+2c\sqrt{N_{\phi}}),\label{eq:Mohr-Coulomb h function}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Once yielding is declared (i.e., 
\begin_inset Formula $f_{s}<0$
\end_inset

 or 
\begin_inset Formula $f_{t}>0$
\end_inset

), then shear or tensile failure is finally decided based on the value of
 
\begin_inset Formula $h$
\end_inset

: 
\emph on
shear if 
\begin_inset Formula $h<0$
\end_inset

 and tensile otherwise
\emph default
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/MohrCoulomb_S1S3.pdf

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:MC yield envelop in S1-S3"

\end_inset

Yield functions that are used to declare yielding in shear and tensile mode.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In general, flow rule for frictional materials is non-associative, i.e., flow
 direction differs from the normal of the yield surface normal.
 As in the definitions of yield functions, the plastic flow potential for
 the 
\emph on
shear
\emph default
 failure in the Mohr-Coulomb model can be given as
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
g_{s}\left(\sigma_{1},\sigma_{3}\right)=\sigma_{1}-N_{\psi}\sigma_{3}\label{eq:plastic flow potential for shear failure}\end{equation}

\end_inset

where 
\begin_inset Formula $N_{\psi}=\frac{1+\sin\psi}{1-\sin\psi}$
\end_inset

 and
\begin_inset Formula $\psi$
\end_inset

 is the dilation angle.
 Likewise, the tensile flow potential is given as
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
g_{t}\left(\sigma_{3}\right)=\sigma_{3}-\sigma_{t}\label{eq:plastic flow potential for tensile failure}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
In the presence of plasticity, the total strain, 
\begin_inset Formula $\Delta\varepsilon$
\end_inset

, is given by
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
\Delta\varepsilon=\Delta\varepsilon^{e}+\Delta\varepsilon^{p},\label{eq:total strain in presence of plasticity}\end{equation}

\end_inset

where 
\begin_inset Formula $\Delta\varepsilon^{e}$
\end_inset

 is the elastic, and 
\begin_inset Formula $\Delta\varepsilon^{p}$
\end_inset

 is the plastic strain increment.
 We assume that if plastic yielding implies negligible viscous flow.
\end_layout

\begin_layout Standard
The plastic strain increment is
\begin_inset Formula \begin{equation}
\Delta\varepsilon^{p}=\beta\frac{\partial g}{\partial\sigma}\,,\label{eq:plastic flow rule}\end{equation}

\end_inset

where 
\begin_inset Formula $\beta$
\end_inset

 is a proportionality constant to be determined.
 
\begin_inset Formula $\beta$
\end_inset

 is determined such that updated stress state is on the yield surface, i.e.,
 
\begin_inset Formula $f\left(\sigma^{n}+\Delta\sigma^{n}\right)=0$
\end_inset

, where 
\begin_inset Formula $\Delta\sigma^{n}=\mathbf{C}:(\Delta\varepsilon^{n}-\Delta\varepsilon^{p})$
\end_inset

 and 
\begin_inset Formula $\mathbf{C}$
\end_inset

 is the elastic moduli tensor.
 This condition is called the 
\emph on
consistency condition
\emph default
 and the parameter 
\begin_inset Formula $\beta$
\end_inset

 is thus called the 
\emph on
consistency parameter
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "SimoHugh2004"

\end_inset

.
 In the principal component representation, 
\begin_inset Formula $\sigma_{A}=a_{AB}^{e}e_{B}$
\end_inset

 where 
\begin_inset Formula $\sigma_{A}$
\end_inset

 and 
\begin_inset Formula $\epsilon_{A}$
\end_inset

 are principal stress and strain, respectively, and 
\begin_inset Formula $\mathbf{a}^{e}$
\end_inset

 is a corresponding elastic moduli matrix of which components are given
 in terms of Lame's constants: 
\begin_inset Formula $a_{AB}^{e}=\lambda+2\mu\delta_{AB}$
\end_inset

.
 By expanding each yield function and using
\begin_inset Formula $\sigma^{TR}=\sigma^{n}+\mathbf{C}:\Delta\varepsilon^{n}$
\end_inset

, we get the following formulae for 
\begin_inset Formula $\beta$
\end_inset

:
\end_layout

\begin_layout Itemize
In case of shear failure
\begin_inset Formula \begin{equation}
\beta=\frac{\sigma_{1}^{TR}-N_{\phi}\sigma_{3}^{TR}+2c\sqrt{N_{\phi}}}{a_{1B}^{e}\frac{\partial g_{s}}{\partial\sigma_{B}}-N_{\phi}a_{3B}^{e}\frac{\partial g_{s}}{\partial\sigma_{B}}}\label{eq:flow parameter for shear failure}\end{equation}

\end_inset


\end_layout

\begin_layout Itemize
In case of tensile failure
\begin_inset Formula \begin{equation}
\beta=\frac{\sigma_{3}^{TR}-\sigma_{t}}{\frac{\partial g^{t}}{\partial\sigma_{B}}}\label{eq:flow parameter for tensile failure}\end{equation}

\end_inset


\end_layout

\begin_layout Paragraph
Hardening/softening
\end_layout

\begin_layout Standard
If strain hardening (including softening as a negative hardening) is considered,
 a more general return mapping is required.
 For completeness, we review the 
\emph on
cutting-plane
\emph default
 algorithm and then discuss the simplified version for (piecewise-)linear
 hardening implemented in SNAC.
 For more detailed discussion, readers are referred to 
\begin_inset CommandInset citation
LatexCommand cite
key "SimoHugh2004"

\end_inset

.
\end_layout

\begin_layout Standard
Here are some preliminary definitions.
 From (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:plastic flow rule"

\end_inset

), the plastic strain rate is given as
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
\dot{\epsilon}_{i}^{p}=\dot{\beta}\frac{\partial G}{\partial\sigma_{i}}\label{eq:plastic strain rate}\end{equation}

\end_inset

We define an internal variable such that plastic parameters are defined
 as a function of that variable.
 Our particular choice is
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
\epsilon^{p*}=\sqrt{\frac{1}{2}\left\{ (\epsilon_{1}^{p}-\bar{\epsilon^{p}})^{2}+(\epsilon_{2}^{p}-\bar{\epsilon^{p}})^{2}+(\epsilon_{3}^{p}-\bar{\epsilon^{p}})^{2}+\bar{\epsilon^{p}}^{2}\right\} }\label{eq:internal variable}\end{equation}

\end_inset

where 
\begin_inset Formula $\bar{\epsilon^{p}}=\frac{1}{3}(\epsilon_{1}^{p}+\epsilon_{2}^{p}+\epsilon_{3}^{p})$
\end_inset

.
 The time rate of change of the internal variable is then
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{align}
\dot{\epsilon}^{p*} & =\frac{\partial\epsilon^{p*}}{\partial\epsilon_{i}^{p}}\dot{\epsilon}_{i}^{p}\nonumber \\
 & =\dot{\beta}\frac{\partial\epsilon^{p*}}{\partial\epsilon_{i}^{p}}\frac{\partial G(\mathbf{\sigma},\epsilon^{p*})}{\partial\sigma_{i}}\label{eq:internal variable rate}\\
 & =-\dot{\beta}r(\mathbf{\sigma},\epsilon^{p*})\nonumber \end{align}

\end_inset

For the simpler notation, a new function 
\begin_inset Formula $r(\mathbf{\sigma},\epsilon^{p*})$
\end_inset

 has been defined above.
 
\end_layout

\begin_layout Standard
We require that the updated stress stay on the yield surface (discrete consisten
cy condition): i.e., 
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
\bar{F}(\Delta\beta)\equiv F(\mathbf{\sigma}(\Delta\beta),\epsilon^{p*}(\Delta\beta))=0,\label{eq:discrete consistency condition}\end{equation}

\end_inset

where 
\begin_inset Formula $\Delta\beta$
\end_inset

 is the increment of the consistency parameter during a time interval between
 
\begin_inset Formula $t_{n}$
\end_inset

and 
\begin_inset Formula $t_{n+1}$
\end_inset

.
 For later uses, we also compute the derivative of 
\begin_inset Formula $\bar{F}$
\end_inset

 with respect to 
\begin_inset Formula $\beta$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
\frac{d\bar{F}}{d\Delta\beta}=\frac{\partial F}{\partial\sigma_{i}}\cdot\frac{\partial\sigma_{i}}{\partial\Delta\beta}+\frac{\partial F}{\partial\epsilon^{P*}}\frac{\partial\epsilon^{p*}}{\partial\Delta\beta}\label{eq:yield function derivative w.r.t. internal variable increment}\end{equation}

\end_inset

Since 
\begin_inset Formula $\sigma_{n+1}=\mathbf{a}^{e}\cdot(\epsilon_{n+1}-\epsilon_{n+1}^{p})=\mathbf{a}^{e}\cdot[\epsilon_{n+1}-(\epsilon_{n}^{p}+\Delta\beta\partial_{\sigma}G(\sigma_{n+1},\epsilon_{n+1}^{p*}))]$
\end_inset

 and 
\begin_inset Formula $\epsilon_{n+1}$
\end_inset

 and 
\begin_inset Formula $\epsilon_{n}^{p}$
\end_inset

 is constant during a time interval,
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
\frac{\partial\sigma_{n+1}}{\partial\Delta\beta}=-\mathbf{a}^{e}\cdot\frac{\partial G}{\partial\sigma_{n+1}}\label{eq:stress derivative w.r.t. consistency parameter}\end{equation}

\end_inset

From Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:internal variable rate"

\end_inset

,
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
\frac{\partial\Delta\epsilon^{p*}}{\partial\Delta\beta}=-r\label{eq:internal var increment derivative w.r.t. consistency parameter increment}\end{equation}

\end_inset

By substituting Eqs.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:stress derivative w.r.t. consistency parameter"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:internal var increment derivative w.r.t. consistency parameter increment"

\end_inset

 into Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:yield function derivative w.r.t. internal variable increment"

\end_inset

, we get
\begin_inset Formula \begin{equation}
\frac{d\bar{F}}{d\Delta\beta}=\frac{\partial F}{\partial\mathbf{\sigma}}\cdot\left(-\mathbf{a}^{e}\cdot\frac{\partial G}{\partial\mathbf{\sigma}}\right)+\frac{\partial F}{\partial\epsilon^{P*}}(-r)\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Now we present the cutting-plane algorithm for updating the stress, internal
 variable and consistency parameters iteratively in case of a general non-linear
 hardening.
\end_layout

\begin_layout Enumerate
Initialization:
\begin_inset Formula \begin{align*}
\epsilon_{n+1}^{p(0)} & =\epsilon_{n}^{p}\\
\epsilon_{n+1}^{p*(0)} & =\epsilon_{n}^{p*}\\
\Delta\beta_{n+1}^{(0)} & =0\end{align*}

\end_inset


\end_layout

\begin_layout Enumerate
Update stresses and evaluate 
\begin_inset Formula $F$
\end_inset

:
\begin_inset Formula \begin{align*}
\sigma_{n+1}^{(k)} & =\mathbf{a}^{e}\cdot(\epsilon_{n+1}-\epsilon_{n+1}^{p(k)})\\
F_{n+1}^{(k)} & =F(\sigma_{n+1}^{(k)},\epsilon_{n+1}^{p*(k)})\end{align*}

\end_inset

If 
\begin_inset Formula $F_{n+1}^{(k)}\leq0$
\end_inset

? exit; otherwise go to step 3.
\end_layout

\begin_layout Enumerate
Incremental upate:
\begin_inset Formula \begin{align*}
\Delta^{2}\beta & =\frac{F_{n+1}^{(k)}}{-\frac{\partial F}{\partial\Delta\beta}}=\frac{F_{n+1}^{(k)}}{\frac{\partial F}{\partial\sigma}\cdot\mathbf{a}^{e}\cdot\frac{\partial G}{\partial\sigma}+\frac{\partial F}{\partial\epsilon^{p*}}r}\\
\epsilon_{n+1}^{p(k+1)} & =\epsilon_{n+1}^{p(k)}+\Delta^{2}\beta\frac{\partial G}{\partial\sigma}(\sigma_{n+1}^{(k)},\epsilon_{n+1}^{p*(k)})\\
\epsilon_{n+1}^{p*(k+1)} & =\epsilon_{n+1}^{p*(k)}-\Delta^{2}\beta r(\sigma_{n+1}^{(k)},\epsilon_{n+1}^{p*(k)})\\
 & =\epsilon_{n+1}^{p*(k)}+\Delta^{2}\beta\left[\left(\frac{\partial\epsilon^{p*}}{\partial\epsilon^{p}}\right)_{n+1}^{(k)}\cdot\frac{\partial G}{\partial\sigma}(\sigma_{n+1}^{(k)},\epsilon_{n+1}^{p*(k)})\right]\\
\Delta\beta_{n+1}^{(k+1)} & =\Delta\beta_{n+1}^{(k)}+\Delta^{2}\beta\end{align*}

\end_inset

Go back to step 2.
\end_layout

\begin_layout Standard
This algorithm is just a standard Newton method applied to the discrete
 consistency equation 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:discrete consistency condition"

\end_inset

.
 Thus, it should be obvious that the plastic correction is accomplished
 by the single step update if the yield function is a linear function of
 the consistency variable.
 In that case, Eqs.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:flow parameter for shear failure"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:flow parameter for tensile failure"

\end_inset

 are immediately retrieved.
\end_layout

\begin_layout Standard
For reference, we further derive the explicit form of the function 
\begin_inset Formula $r$
\end_inset

 in terms of principal plastic strains and stresses by working out the partial
 derivative, 
\begin_inset Formula $\partial\epsilon^{p*}/\partial\epsilon^{p}$
\end_inset

.
 From Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:internal variable"

\end_inset

,
\begin_inset Formula \begin{align*}
\frac{\partial\epsilon^{p*}}{\partial\epsilon_{i}^{p}} & =\frac{1}{2\epsilon^{p*}}\frac{1}{2}\left\{ \sum_{j=1}^{3}2(\epsilon_{j}^{p}-\bar{\epsilon^{p}})(\delta_{ij}-\frac{1}{3})+\frac{2}{3}\bar{\epsilon^{p}}\right\} \\
\Longrightarrow\frac{\partial\epsilon^{p*}}{\partial\epsilon_{1}^{p}} & =\frac{1}{2\epsilon^{p*}}\left\{ \frac{2}{3}(\epsilon_{1}^{p}-\bar{\epsilon^{p}})-\frac{1}{3}(\epsilon_{2}^{p}-\bar{\epsilon^{p}})-\frac{1}{3}(\epsilon_{3}^{p}-\bar{\epsilon^{p}})+\frac{1}{3}\bar{\epsilon^{p}}\right\} \\
\frac{\partial\epsilon^{p*}}{\partial\epsilon_{2}^{p}} & =\frac{1}{2\epsilon^{p*}}\left\{ -\frac{1}{3}(\epsilon_{1}^{p}-\bar{\epsilon^{p}})+\frac{2}{3}(\epsilon_{2}^{p}-\bar{\epsilon^{p}})-\frac{1}{3}(\epsilon_{3}^{p}-\bar{\epsilon^{p}})+\frac{1}{3}\bar{\epsilon^{p}}\right\} \\
\frac{\partial\epsilon^{p*}}{\partial\epsilon_{3}^{p}} & =\frac{1}{2\epsilon^{p*}}\left\{ -\frac{1}{3}(\epsilon_{1}^{p}-\bar{\epsilon^{p}})-\frac{1}{3}(\epsilon_{2}^{p}-\bar{\epsilon^{p}})+\frac{2}{3}(\epsilon_{3}^{p}-\bar{\epsilon^{p}})+\frac{1}{3}\bar{\epsilon^{p}}\right\} \end{align*}

\end_inset

With 
\begin_inset Formula $\partial G/\partial\sigma$
\end_inset

 being 
\begin_inset Formula $[1,0,-N_{\psi}]$
\end_inset

, the function 
\begin_inset Formula $r(\sigma,\epsilon^{p*})$
\end_inset

 is given by
\begin_inset Formula \begin{align*}
r(\sigma,\epsilon^{p*}) & =-\left(\frac{\partial\epsilon^{p*}}{\partial\epsilon^{p}}\right)\cdot\left(\frac{\partial G}{\partial\sigma}\right)\\
 & =-\frac{1}{2\epsilon^{p*}}\left[\frac{1}{3}\left(2+N_{\psi}\right)(\epsilon_{1}^{p}-\bar{\epsilon^{p}})-\frac{1}{3}\left(1-N_{\psi}\right)(\epsilon_{2}^{p}-\bar{\epsilon^{p}})-\frac{1}{3}\left(1+2N_{\psi}\right)(\epsilon_{3}^{p}-\bar{\epsilon^{p}})+\frac{1}{3}\left(1-N_{\psi}\right)\bar{\epsilon^{p}}\right]\end{align*}

\end_inset

Note that when 
\begin_inset Formula $\psi\simeq0^{\circ}$
\end_inset

, 
\begin_inset Formula $N_{\psi}\simeq1$
\end_inset

 and 
\begin_inset Formula $\bar{\epsilon^{p}}\simeq0$
\end_inset

.
 Then, the value of 
\begin_inset Formula $r$
\end_inset

 becomes 
\begin_inset Formula $\sim-1$
\end_inset

.
 Since the dilation angle is often set to be zero or a small value, and
 the cohesion is always defined as a piecewise linear function, 
\begin_inset Formula $F$
\end_inset

 is approximately linear with regard to the consistency parameter.
 The current consistency parameter computation implemented in SNAC is thus
 justified.
 However, if any non-linearity is introduced such as friction angle varying
 with the internal variable and non-linearly changing cohesion, the interation
 presented above should be performed.
\end_layout

\begin_layout Subsection
Remeshing
\begin_inset CommandInset label
LatexCommand label
name "sub:Remeshing"

\end_inset


\end_layout

\begin_layout Standard
Remeshing becomes necessary in SNAC when continued deformation distorts
 a mesh so severely that the accuracy of solutions is deteriorated.
 In SNAC, remeshing is done by moving the nodes back to their original positions
, under the constraint that physically meaningful features such as top and
 bottom topography are conserved.
 Then both nodal (velocity and temperature) and elemental variables (stress,
 strain rate, heat flux, and plastic strain) are transferred onto the new
 mesh from the deformed mesh.
 The nodal transfer is accomplished by locating the tetrahedron in the old
 mesh which contains a node of the new mesh.
 Then shape (interpolation) functions corresponding to the location of the
 new node with respect to the old element is calculated and used to interpolate
 nodal quantities of the old deformed mesh.
 The element-associated variables (integrated by 1-point Gauss quadrature)
 are first ``recovered'' as nodal fields by Superconvergent Patch Recovery
 method
\begin_inset CommandInset citation
LatexCommand cite
key "ZienZhu1992"

\end_inset

.
 Like other nodal fields, these recovered fields are interpolated onto a
 new mesh.
 Then, element-associated variables are evaluated at the new tetrahedron's
 barycenter, coinciding with 1-point Gauss quadrature, based on the interpolated
 recovered fields.
 Fig.
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Remeshing.-Lagrangian-mesh"

\end_inset

 demonstrates how remeshing actually works.
 
\end_layout

\begin_layout Standard
The current remeshing algorithm, however, has some limitations.
 
\end_layout

\begin_layout Itemize
The phase field is not accurately remapped.
 This field is not a physical variable but a set of integers registered
 at each tetrahedron to represent the element's material type.
 Although starting from integer values, a phase field for more than one
 material types ends up including some real numbers after remeshing, due
 to numerical diffusion during the recovery process.
 Fractional material ID is not defined both physically and numerically in
 the current version of SNAC.
 Although rounding-off is forced for the continuation of calculation, the
 mass of each phase is not guaranteed to be conserved.
\end_layout

\begin_layout Itemize
Domain decomposition, the parallelism implemented in SNAC, often makes it
 difficult to map variables between meshes when a parallel boundary (virtual
 boundary between subdomains assigned to more than one processor) of the
 old mesh has moved too far away from the corresponding one of the new mesh.
 
\end_layout

\begin_layout Itemize
This remeshing works best in the case of lateral extension because the nodes
 are moved back to their original positions.
 If a mesh has shrunk laterally and then remeshing moves all the nodes back
 to their original horizontal positions, it is impossible to remap variables
 for the regions of a new mesh that do not have overlapping parts in the
 deformed mesh.
 In such a case, one would have to 
\emph on
assume
\emph default
 states and properties of material for the unmappable regions.
 
\end_layout

\begin_layout Itemize
Note that Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Remeshing.-Lagrangian-mesh"

\end_inset

b shows that remeshing cannot only generate a more regular mesh but also
 change the bottom boundary of the domain.
 Although useful in some cases, this ``boundary restoring'' technique should
 be used with caution because it also creates unmappable regions and thus
 requires us to assume the state and properties of the material.
 SNAC retains the deformed boundary by default.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename figures/Remeshing.png
	lyxscale 101

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Remeshing.-Lagrangian-mesh"

\end_inset

(a) Meshes and velocity fields before (blue) and after (red) remeshing.
 (b) Plastic strain, an element-associated variable, is shown on a deformed
 mesh (upper panel) and mapped onto a new mesh after remeshing (lower panel).
 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
SNAC Design
\end_layout

\begin_layout Standard
SNAC follows StGermain's architecture (see Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:StGermain"

\end_inset

).
 Although primarily implemented in C, it is object-oriented, and makes use
 of extensibility and inheritance.
 Having StGermain as a framework, SNAC can directly use or extend many abilities
 of StGermain available in generic forms: XML input, extensible data structures,
 classified output streams, etc.
 The three key design ideas relevant to SNAC are the plugins, SNAC Context
 and Entry Points.
\end_layout

\begin_layout Subsection
Plugins
\end_layout

\begin_layout Standard
SNAC is readily customizable through writing a ``plugin,'' a shared object
 that can be loaded dynamically at run-time.
 Together with the ability to manipulate Entry Points, use of plugins makes
 it simple and local to extend SNAC.
 For instance, if a mesh for a quadrant of a cylinder is desired, one can
 simply include 
\family typewriter
SnacCylinderQuad
\family default
 in the list of plugins in an input file.
 If a thermal problem needs to be solved in addition to a quasistatic momentum
 balance problem, loading the plugin, 
\family typewriter
SnacTemperature
\family default
, is all that needs to be done.
 Trying out different constitutive models can be done in the same fashion:
 one can load one of the plugins such as 
\family typewriter
SnacElastic
\family default
, 
\family typewriter
SnacViscoElasti
\family sans
c
\family default
, or 
\family typewriter
SnacViscoPlastic
\family default
.
 
\end_layout

\begin_layout Subsection
The SNAC ``Context''
\end_layout

\begin_layout Standard
The SNAC Context is the top-level ``master'' object in a SNAC simulation.
 Its main purpose is twofold:
\end_layout

\begin_layout Enumerate
Providing an interface to control and run a SNAC simulation.
 This is done mainly through the Entry Points, described in the next section.
\end_layout

\begin_layout Enumerate
Packaging together all the high-level data structures that a SNAC run requires,
 such as the Mesh, boundary conditions, simulation parameters, etc.
 Most of these objects are extensible and/or configurable using the XML
 input file.
\end_layout

\begin_layout Standard
The SNAC Context inherits from the 
\emph on
StGermain Mesh
\emph default
 and 
\emph on
Abstract Context
\emph default
, which provide much of the default functionality.
 
\end_layout

\begin_layout Subsection
Call-Tree of Entry Points 
\end_layout

\begin_layout Standard
An entry point (EP) is essentially a list of function pointers, which can
 be dynamically modified.
 When an EP is called, it runs each of the function pointers in its list
 sequentially, with the same arguments.
 Since the SNAC Context calls the EPs in a specific hierarchy, an application's
 set of EPs defines the call-tree for an application.
\end_layout

\begin_layout Standard
The reason entry points are dynamic lists of function pointers (or ``hooks'')
 is that a user, e.g., a research scientist, often wants to extend the default
 functionality of an application at only a few specific points in the code.
 In SNAC, this is simply a matter of adding pointers to their custom functions
 to the relevant entry points.
 For instance, to add a contribution from the Winkler foundation to the
 residual force at each node on the bottom surface, one can simply include
 a plugin called 
\family typewriter
SnacWinklerForce
\family default
.
 What this plugin does is to add (or ``hook up'') a pointer to its own force
 computing routine to the entry point that already has a pointer to the
 function computing internal residual forces.
 While being a part of the loop over all the nodes (local to a processor),
 this plugin's function takes care of deciding if a node is on the bottom
 and adding the computed restoring force.
 In this way, the core structure of the code does not need to be modified
 every time new operations on nodes or elements are added.
 StGermain provides a flexible way of managing hooked-up function pointers
 such that one can create a new entry point, set a default function for
 it, insert one function pointer before or after another within an Entry
 Point, etc.
 
\end_layout

\begin_layout Standard
Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:EP_hierarchy"

\end_inset

 outlines the entry points set up in SNAC.
 It is represented as a tree-like hierarchy: if a ``hook'' calls other entry
 points, either in its own function or other normal functions it calls,
 the called entry points are offset to the right of that hook.
 
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename figures/EP_hierarchy_StG.pdf
	lyxscale 40

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:EP_hierarchy"

\end_inset

A tree-like diagram showing the hierarchy of entry points set up in SNAC
 together with hooked-up functions in each entry point.
 The functions defined by StGermain are marked in blue while those defined
 in SNAC are in red.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:StGermain"

\end_inset

StGermain 
\end_layout

\begin_layout Standard
StGermain is a software framework tuned for the development of codes common
 to the physical sciences, such as geodynamics.
 It permits developers to build applications that are extensible, adaptable,
 cleanly designed and interoperable with one other.
 Moreover, StGermain answers the question of, ``Now that I have written
 my code, how do I share it with my collaborators with the optional inclusion
 of their additions?'' This capability is inherent to StGermain and provides
 an important feature lacking in most scientific codes.
 As of the end of 2008, the development of StGermain in conjunction with
 SNAC has been finished and its interfaces have been frozen.
 
\end_layout

\begin_layout Standard
StGermain is funded primarily through VPAC and Caltech.
 The project was born with the development of SNAC, and the need to generalize
 the same abilities that had been incorporated into the development of Snark.
 It was time to restart from scratch, and was done late at night under a
 California moon, aided by some fine Belgian beer and the finest Parisienne
 electro-jazz.
 However, it is unclear whether StGermain is named for the French techno-jazz
 group led by Ludovic Navarre or the famed Paris quartier.
 
\end_layout

\begin_layout Standard
StGermain provides a suite of libraries needed by general physical modeling
 software such as flow control, domain discretization, and initial/boundary
 condition management 
\begin_inset CommandInset citation
LatexCommand cite
key "Quen_etal2005"

\end_inset

.
 One of the advantages of using the StGermain framework is that a code can
 be easily extended through entry points and plugins.
 By adding or removing entry points, a problem-specific algorithm can be
 implemented while keeping the modification of source codes limited.
 Plugins are small pieces of codes that work as a part of the program, but
 can be compiled separately and dynamically loaded at run time.
 Thus, their developments can be completely independent of the main program.
 For example, a new constitutive relation or time-varying boundary conditions
 can be made available as plugins without modifying or compiling the whole
 program that already exists.
 
\end_layout

\begin_layout Chapter
Installation and Getting Help
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
To install SNAC, follow the procedure that is commonly used with other open-sour
ce software packages.
 First, download the source package (in the form of a compressed 
\family typewriter
tar
\family default
 file) available at the SNAC web page 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

geodynamics.org/cig/software/packages/long/snac
\end_layout

\end_inset

.
 After unpacking the source, you run a prepackaged shell script to configure
 SNAC for your system.
 
\end_layout

\begin_layout Section
Getting Help
\end_layout

\begin_layout Standard
For help, send e-mail to the CIG Long-term Tectonics Mailing List 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

cig-long@geodynamics.org
\end_layout

\end_inset

.
 You can subscribe to the Mailing List and view archived discussion at the
 Geodynamics Mail Lists web page 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

geodynamics.org/cig/lists
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
System Requirements
\end_layout

\begin_layout Standard
Installation of SNAC requires the following:
\end_layout

\begin_layout Itemize
A C compiler
\end_layout

\begin_layout Itemize
An MPI library
\end_layout

\begin_layout Itemize
Libxml2
\end_layout

\begin_layout Itemize
GNU Scientific Library
\end_layout

\begin_layout Standard
MPI installations are typically configured for a particular compiler, and
 provide a special wrapper command to invoke the right compiler.
 Therefore, the choice of MPI implementation often determines which C compiler
 to use.
\end_layout

\begin_layout Subsection
C Compiler
\end_layout

\begin_layout Standard
On Unix or Linux systems, there is a high likelihood that a usable C compiler
 is already installed.
 To check, type 
\family typewriter
cc
\family default
 at the shell prompt:
\end_layout

\begin_layout LyX-Code
$ cc
\end_layout

\begin_layout LyX-Code
cc: no input files
\end_layout

\begin_layout LyX-Code
$
\end_layout

\begin_layout Standard
On Linux, if the 
\family typewriter
cc
\family default
 command is not found, install GCC using the package manager for your distributi
on.
\end_layout

\begin_layout Standard
The Mac OS X version of GCC is included in a software development suite
 called Xcode.
 Xcode is available as a free download at the Apple Developer Connection
 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

developer.apple.com
\end_layout

\end_inset

.
\end_layout

\begin_layout Quote

\color red
Warning:
\color none
 
\color black
If you are using an Intel compiler on an Itanium CPU, do not use the
\color none
 
\family typewriter
\color black
-O3
\family default
\color none
 
\color black
optimization flag as reports indicate that this optimization level will
 generate incorrect codes.
 For any compiler, you should always be careful about the correctness of
 the compiled codes when using an
\color none
 
\family typewriter
\color black
-O3
\family default
\color none
 
\color black
or higher optimization level.
\end_layout

\begin_layout Subsection
MPI Library
\end_layout

\begin_layout Standard
StGermain requires an implementation of the MPI-1 standard for parallel
 message passing, even if you only intend to run the code in serial.
 A popular choice is 
\begin_inset CommandInset href
LatexCommand href
name "MPICH"
target "www-unix.mcs.anl.gov/mpi/mpich"

\end_inset

.
 Installing MPICH from source involves walking through the standard GNU
 build procedure (
\family typewriter
configure && make && make install
\family default
).
\end_layout

\begin_layout Standard
Linux users may have a prebuilt MPI package available for their distribution.
 On Mac OS X, the Fink package manager offers a prepackaged version of 
\begin_inset CommandInset href
LatexCommand href
name "LAM/MPI"
target "www.lam-mpi.org"

\end_inset

; so if you have 
\begin_inset CommandInset href
LatexCommand href
name "Fink"
target "fink.sourceforge.net"

\end_inset

 installed, simply enter the following command from a Terminal window to
 install LAM/MPI:
\end_layout

\begin_layout LyX-Code
$ fink install lammpi lammpi-dev
\end_layout

\begin_layout Standard
We highly recommend that you set up the environment variables that allow
 StGermain to use MPI.
 This is done by setting the following environment variables so the VMake
 build system knows where to find MPICH.
\end_layout

\begin_layout Standard
In 
\family typewriter
bash
\family default
,
\end_layout

\begin_layout LyX-Code
export MPI_DIR=${HOME}/opt/mpich-1.2.7p1 
\end_layout

\begin_layout LyX-Code
export MPI_BINDIR=${MPI_DIR}/bin 
\end_layout

\begin_layout LyX-Code
export MPI_LIBDIR=${MPI_DIR}/lib 
\end_layout

\begin_layout LyX-Code
export MPI_INCDIR=${MPI_DIR}/include 
\end_layout

\begin_layout LyX-Code
export MPI_RUN=${MPI_BINDIR}/mpirun 
\end_layout

\begin_layout LyX-Code
export PATH=${MPI_BINDIR}:${PATH} 
\end_layout

\begin_layout LyX-Code
export LD_LIBRATY_PATH=${MPI_LIBDIR}:${LD_LIBRATY_PATH}
\end_layout

\begin_layout Standard
In 
\family typewriter
tcsh
\family default
,
\end_layout

\begin_layout LyX-Code
setenv MPI_DIR ${HOME}/opt/mpich-1.2.7p1 
\end_layout

\begin_layout LyX-Code
setenv MPI_BINDIR ${MPI_DIR}/bin 
\end_layout

\begin_layout LyX-Code
setenv MPI_LIBDIR ${MPI_DIR}/lib 
\end_layout

\begin_layout LyX-Code
setenv MPI_INCDIR ${MPI_DIR}/include 
\end_layout

\begin_layout LyX-Code
setenv MPI_RUN ${MPI_BINDIR}/mpirun 
\end_layout

\begin_layout LyX-Code
setenv PATH ${MPI_BINDIR}:${PATH} 
\end_layout

\begin_layout LyX-Code
setenv LD_LIBRATY_PATH ${MPI_LIBDIR}:${LD_LIBRATY_PATH}
\end_layout

\begin_layout Standard
MPI_DIR should be replaced with the actual path where MPICH is installed.
 
\end_layout

\begin_layout Standard
If you need to specify a machine file every time you run mpich, then in
 order for VMake's ``make check'' command to work, you must specify another
 environment variable, MPI_MACHINES.
 Here are some examples: 
\end_layout

\begin_layout LyX-Code
In bash: export MPI_MACHINES="/home/raq/machinefile" 
\end_layout

\begin_layout LyX-Code
In tcsh: setenv MPI_MACHINES -machinefile /home/raq/machinefile
\end_layout

\begin_layout Subsection
Libxml2
\end_layout

\begin_layout Standard
The Libxml2 library and toolkit are required for SNAC to handle the input
 files.
 Although already included in most of the recent Linux systems, it can be
 obtained from The XML C parser and toolkit of 
\begin_inset CommandInset href
LatexCommand href
name "Gnome"
target "xmlsoft.org"

\end_inset

 and installed manually.
 Precompiled packages for various Linux distributions and OS X are also
 available through their own package management software.
\end_layout

\begin_layout Subsection
GNU Scientific Library
\end_layout

\begin_layout Standard
GNU Scientific Library (GSL) is ``a numerical library for C and C++ programmers'
' (
\begin_inset CommandInset href
LatexCommand href
name "http://www.gnu.org/software/gsl"
target "http://www.gnu.org/software/gsl/"

\end_inset

).
 SNAC needs this library for remeshing (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Remeshing"

\end_inset

) since the recovery method involves matrix inversion operations.
 GSL's linear algebra routines are utilized in SNAC's remesher plugin.
 Although the remesher is a plugin, it is expected to be used in most geodynamic
 applications.
 Also, the use of GSL will be expanded in future development.
 For this reason, GSL has become a requirement.
\end_layout

\begin_layout Standard
SNAC's build scripts will be able to find and link GSL if it is installed
 in a standard location.
 But if it is installed locally, one should define an environment variable,
 
\family typewriter
GSL_DIR
\family default
, as follows:
\end_layout

\begin_layout LyX-Code
In bash: export GSL_DIR="/home/raq/opt/gsl" 
\end_layout

\begin_layout LyX-Code
In tcsh: setenv GSL_DIR /home/raq/opt/gsl
\end_layout

\begin_layout Subsection
Other Environment Variables
\end_layout

\begin_layout Standard
It is handy, although not necessary, to define the following environment
 variables for both building and running SNAC:
\end_layout

\begin_layout Standard
In 
\family typewriter
bash
\family default
,
\end_layout

\begin_layout LyX-Code
export SNAC_DIR=${HOME}/opt/SNAC
\end_layout

\begin_layout LyX-Code
export SNAC_BINDIR=${SNAC_DIR}/build/bin 
\end_layout

\begin_layout LyX-Code
export SNAC_INCDIR=${SNAC_DIR}/build/include 
\end_layout

\begin_layout LyX-Code
export SNAC_LIBDIR=${SNAC_DIR}/build/lib 
\end_layout

\begin_layout LyX-Code
export PATH=${SNAC_BINDIR}:${PATH}
\end_layout

\begin_layout LyX-Code
export LD_LIBRARY_PATH=${SNAC_LIBDIR}:${LD_LIBRARY_PATH}
\end_layout

\begin_layout Standard
In 
\family typewriter
tsch
\family default
,
\end_layout

\begin_layout LyX-Code
setenv SNAC_DIR ${HOME}/opt/SNAC
\end_layout

\begin_layout LyX-Code
setenv SNAC_BINDIR ${SNAC_DIR}/build/bin 
\end_layout

\begin_layout LyX-Code
setenv SNAC_INCDIR ${SNAC_DIR}/build/include 
\end_layout

\begin_layout LyX-Code
setenv SNAC_LIBDIR= ${SNAC_DIR}/build/lib 
\end_layout

\begin_layout LyX-Code
setenv PATH ${SNAC_BINDIR}:${PATH}
\end_layout

\begin_layout LyX-Code
setenv LD_LIBRARY_PATH ${SNAC_LIBDIR}:${LD_LIBRARY_PATH}
\end_layout

\begin_layout Section
Downloading and Unpacking Source
\end_layout

\begin_layout Standard
Download SNAC from the 
\begin_inset CommandInset href
LatexCommand href
name "SNAC web page"
target "geodynamics.org/cig/software/packages/long/snac"

\end_inset

.
 Save the SNAC tarball locally, and unpack it using the 
\family typewriter
tar
\family default
 command: 
\end_layout

\begin_layout LyX-Code
$ tar xzf SNAC-1.2.0.tar.gz
\end_layout

\begin_layout Standard
If you don't have GNU Tar, try the following command instead: 
\end_layout

\begin_layout LyX-Code
$ gunzip -c SNAC-1.2.0.tar.gz | tar xf -
\end_layout

\begin_layout Section
Installation Procedure
\end_layout

\begin_layout Standard
After unpacking the source, use the following procedure to install SNAC:
\end_layout

\begin_layout Enumerate
Navigate (i.e., 
\family typewriter
cd
\family default
) to the directory containing the SNAC source
\family typewriter
.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

$ cd SNAC-1.2.0
\end_layout

\begin_layout Enumerate
Type .
\family typewriter
/configure.sh
\family default
 to configure the package for your system
\family typewriter
.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

$ ./configure.sh
\end_layout

\begin_layout Enumerate
Type 
\family typewriter
make
\family default
 to build the package.
\family typewriter

\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

$ make
\end_layout

\begin_layout Standard
All the newly created files during the building procedure are placed in
 the 
\family typewriter
build
\family default
 subdirectory.
 Upon successful completion, the 
\family typewriter
make
\family default
 command executable 
\family typewriter
Snac
\family default
 in the 
\family typewriter
build/bin
\family default
 subdirectory.
 Currently, installing SNAC into another location is not supported.
\end_layout

\begin_layout Standard
The following options can be included in the options argument during configurati
on in comma-separated form.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{quote}
\end_layout

\begin_layout Plain Layout


\backslash
begin{description}
\end_layout

\begin_layout Plain Layout


\backslash
item [{optimised}] compiles optimized code, with no debugging symbols.
\end_layout

\begin_layout Plain Layout


\backslash
item [{cautious}] performs additional run-time validation checks.
 
\end_layout

\begin_layout Plain Layout


\backslash
item [{macro
\backslash
_as
\backslash
_func}] compiles some macros as functions instead for safety checks.
 Will incur a performance penalty.
 
\end_layout

\begin_layout Plain Layout


\backslash
item [{memory
\backslash
_stats}] enable statistics recording of the memory module.
\end_layout

\begin_layout Plain Layout


\backslash
item [{tau}] compiles the code ready for use with the tau profiler.
\end_layout

\begin_layout Plain Layout


\backslash
item [{pdt}] automatically instruments the code for use with tau using.
\end_layout

\begin_layout Plain Layout


\backslash
end{description}
\end_layout

\begin_layout Plain Layout


\backslash
end{quote}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For example, to include cautious checks and memory statistics recording:
 
\end_layout

\begin_layout LyX-Code
$ ./configure.sh --options=cautious,memory_stats
\end_layout

\begin_layout Standard
Note that the ``build'' directory under 
\family typewriter
${SNAC_DIR}
\family default
 is named according to the given extra options.
 For example, 
\family typewriter
${SNAC_DIR}/build-optimised
\family default
 is created when 
\family typewriter
optimised
\family default
 option is given.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Software-Repository"

\end_inset

Installing from the Software Repository
\end_layout

\begin_layout Standard
The SNAC source code is available via a Subversion server at the Geodynamics
 website 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

geodynamics.org
\end_layout

\end_inset

.
 This allows users to view the revision history of the code and check out
 the most recent development version of the software.
\end_layout

\begin_layout Quote

\series bold
NOTE:
\series default
 If you are content with the prepared source package, you may skip this
 section.
\end_layout

\begin_layout Subsection
Tools You Will Need
\end_layout

\begin_layout Standard
In addition to the usual system requirements, you will need a handful of
 additional development tools installed in order to work with the source
 from the CIG software repository.
\end_layout

\begin_layout Standard
First, you must have a Subversion client installed.
 To check, type 
\family typewriter
svn
\family default
; it should return a usage message.
\end_layout

\begin_layout LyX-Code
$ svn
\end_layout

\begin_layout LyX-Code
Type 'svn help' for usage.
\end_layout

\begin_layout Standard
For more information on Subversion, visit the Subversion website 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

subversion.tigris.org
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
Download Source from Subversion
\end_layout

\begin_layout Standard
To check out the latest version of the software, use the 
\family typewriter
svn checkout
\family default
 command:
\end_layout

\begin_layout LyX-Code
$ svn checkout http://geodynamics.org/svn/cig/long/3D/SNAC/trunk SNAC
\end_layout

\begin_layout Standard
This will create the local directory 
\family typewriter
SNAC
\family default
 (if it doesn't already exist) and fill it with the latest SNAC source from
 the CIG software repository.
\end_layout

\begin_layout Standard
The 
\family typewriter
SNAC
\family default
 directory thus created is called a 
\emph on
working copy
\emph default
.
 To merge the latest changes into an existing working copy, use the 
\family typewriter
svn update
\family default
 command:
\end_layout

\begin_layout LyX-Code
$ cd SNAC
\end_layout

\begin_layout LyX-Code
$ svn update
\end_layout

\begin_layout Standard
This will preserve any local changes you have made to your working copy.
\end_layout

\begin_layout Chapter
Running SNAC
\end_layout

\begin_layout Section
Using SNAC
\end_layout

\begin_layout Standard
The basic usage is
\end_layout

\begin_layout LyX-Code
Snac input.xml
\end_layout

\begin_layout Standard
Running SNAC in parallel depends on the system configuration, but a typical
 example is
\end_layout

\begin_layout LyX-Code
mpirun -np 8 `which Snac` ./input.xml > log.stdout
\end_layout

\begin_layout Section
Changing Parameters 
\end_layout

\begin_layout Standard
Input parameters of SNAC are defined using the XML syntax 
\end_layout

\begin_layout LyX-Code
<param name=
\emph on
parameter
\emph default
> 
\emph on
value
\emph default
 </param>
\end_layout

\begin_layout Standard
Many of the parameters defined in this fashion can be conceptually grouped
 based on their functionality.
 They can also be a member of a structure, or itemized under a list, which
 in turn can become a member of a structure.
 
\end_layout

\begin_layout Subsection
Simulation Control Parameters 
\end_layout

\begin_layout Standard
Parameters in this group control the time marching in SNAC.
\end_layout

\begin_layout Description

\family typewriter
startTime:
\family default
 the starting time of simulation.
 0 sec by default.
 
\end_layout

\begin_layout Description

\family typewriter
stopTime:
\family default
 the ending time of simulation.
 1.0e+20 sec by default.
 
\end_layout

\begin_layout Description

\family typewriter
outputPath
\family default
: the relative or absolute path to a directory where outputs are dumped.
 
\end_layout

\begin_layout Description

\family typewriter
dumpEvery
\family default
: the interval of time steps to dump outputs.
 
\end_layout

\begin_layout Description

\family typewriter
maxTimeSteps
\family default
: the maximum number of time steps.
 The time marching ends either at ``stoptime'' or at ``maxTimeSteps,'' whichever
 comes first.
 
\end_layout

\begin_layout Description

\family typewriter
checkpointEvery
\family default
: the interval of time steps to checkpoint (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Checkpointing-and-Restarting"

\end_inset

).
 
\end_layout

\begin_layout Description

\family typewriter
restartTimestep
\family default
: the time step to restart (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Checkpointing-and-Restarting"

\end_inset

).
 
\end_layout

\begin_layout Subsection
SNAC-Specific Parameters 
\end_layout

\begin_layout Standard
Parameters in this group are specific to SNAC.
 
\end_layout

\begin_layout Description

\family typewriter
density
\family default
: the average density of the material SNAC is simulating.
 Unit is kg/m3.
 
\end_layout

\begin_layout Description

\family typewriter
gravity
\family default
: the gravitational acceleration.
 9.8 m/sec2 by default.
 
\end_layout

\begin_layout Description

\family typewriter
demf
\family default
: the dimensionless force damping factor.
 0.8 by default.
 
\end_layout

\begin_layout Description

\family typewriter
dtType
\family default
: the type of time marching method.
 Either ``dynamic'' or ``constant.'' 
\end_layout

\begin_layout Description

\family typewriter
timeStep:
\family default
 the size of time step in seconds.
 Used only when dtType is ``constant.''
\end_layout

\begin_layout Description

\family typewriter
forceCalcType
\family default
: the type of assembling forces on the parallel boundary nodes.
 
\end_layout

\begin_layout Description

\family typewriter
quick
\family default
: the least amount of computation.
 Used only in serial runs (Obsolete).
 
\end_layout

\begin_layout Description

\family typewriter
normal
\family default
: works in both serial and 1D parallel runs (Obsolete).
\end_layout

\begin_layout Description

\family typewriter
complete
\family default
: Robust nodal force assembly.
\end_layout

\begin_layout Description

\family typewriter
decomposedAxis
\family default
: axis to decompose for parallel runs.
 0, 1, or 2 for x, y, and z axis, respectively.
 Needed only when decompDims=1.
\end_layout

\begin_layout Description

\family typewriter
storeForces
\family default
: ``yes'' to store residual forces for each node.
 Otherwise, ``no.''
\end_layout

\begin_layout Description

\family typewriter
forceCheckSum
\family default
: If ``yes,'' the sum of forces is checked if it is consistent.
\end_layout

\begin_layout Description

\family typewriter
topo_kappa
\family default
: Parameter for topography smoothing.
\end_layout

\begin_layout Description

\family typewriter
alpha
\family default
: Volumetric thermal expansion coefficient in the unit of 
\begin_inset Formula $K^{-1}$
\end_inset

.
\end_layout

\begin_layout Subsection
Plugins List 
\end_layout

\begin_layout Standard
All the plugins to load should be listed under the ``extensions'' or ``plugins''
 list as in the following example:
\end_layout

\begin_layout LyX-Code
<list name="extensions"> 
\end_layout

\begin_layout LyX-Code
        <param> SnacSpherical </param> 
\end_layout

\begin_layout LyX-Code
</list>
\end_layout

\begin_layout Standard
Note the changed syntax used for the item of the list.
 One can populate the list with other plugins.
 The following is the list of plugins available for SNAC:
\end_layout

\begin_layout Description

\family typewriter
SnacSpherical:
\family default
 needed to generate a spherical shell mesh.
 
\end_layout

\begin_layout Description

\family typewriter
SnacRemesher
\family default
: when using remeshing.
 The related parameters should also be set.
 
\end_layout

\begin_layout Description

\family typewriter
SnacTemperature
\family default
: when solving for heat diffusion equation.
 
\end_layout

\begin_layout Description

\family typewriter
SnacElastic/SnacPlastic/SnacMaxwell/SnacViscoPlastic
\family default
: for elastic, elasto-plastic, Maxwell viscoelastic, and elasto-visco-plastic
 rheology, respectively.
 
\end_layout

\begin_layout Description

\family typewriter
SnacHydroStaticIC:
\family default
 generates an initial stress field assuming hydrostatic equilibrium.
 Meaningful only when gravity is non-zero.
 
\end_layout

\begin_layout Description

\family typewriter
SnacWinklerForce
\family default
: When gravity is non-zero, and there are no boundary conditions for the
 vertical velocity component on the bottom surface, the Winkler foundation
 is applied.
\end_layout

\begin_layout Description

\family typewriter
SnacPlSeeds/SnacVPSeeds
\family default
: can control the positions of elements that have the initial non-zero plastic
 strain.
 These elements play the role of seeds where strain localization initiates.
 Used in tandem with SnacPlastic and SnacViscoPlastic, respectively.
\end_layout

\begin_layout Description

\family typewriter
SnacRestart
\family default
: required to restart a run.
 See 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Restarting"

\end_inset

 for more details.
\end_layout

\begin_layout Standard
Other plugins found in the plugins directory are experimental.
\end_layout

\begin_layout Subsection
Mesh Structure 
\end_layout

\begin_layout Standard
Parameters needed for generating a mesh are grouped as members of ``
\family typewriter
mesh
\family default
'' structure.
 
\family typewriter
meshSize[I,J,K]
\family default
 specifies the node numbers in 
\family typewriter
x
\family default
, 
\family typewriter
y
\family default
, and 
\family typewriter
z
\family default
 axis, respectively, while 
\family typewriter
[min,max][X,Y,Z]
\family default
 defines the physical dimensions of the domain in 
\emph on
meter
\emph default
.
 In the case of using spherical geometry, 
\family typewriter
[theta,phi,r][Min,Max]
\family default
 should have appropriate values so that the 
\family typewriter
SnacSpherical
\family default
 plugin can use them to initialize spherical node coordinates.
 
\family typewriter
theta
\family default
 and 
\family typewriter
phi
\family default
 are longitudes and latitudes in 
\emph on
degrees
\emph default
, and 
\family typewriter
r[Min,Max]
\family default
 are the radii in 
\emph on
meters
\emph default
.
 SNAC will not be confused even if both sets of parameters are present in
 one input file.
 
\family typewriter
meshType
\family default
 is either 
\family typewriter
cartesian
\family default
 or 
\family typewriter
spherical
\family default
.
 If not specified, it is 
\family typewriter
cartesian
\family default
 by default.
 However, it is important to assign a correct value for remeshing.
 Finally, the two parameters for a parallel run are 
\family typewriter
shadowDepth
\family default
 and 
\family typewriter
decompDims
\family default
.
 
\family typewriter
shadowDepth
\family default
 determines how many elements in one local domain are made to transfer variables
 to neighbor domains.
 It takes a non-negative integer value corresponding to the number of layers
 of elements.
 To run SNAC in parallel, this parameter should be 1 or larger.
 
\family typewriter
decompDims
\family default
 determines whether parallel domain decomposition is performed in 1, 2 or
 3 dimensions.
\end_layout

\begin_layout Subsection
Parameters for Material Property 
\end_layout

\begin_layout Standard
Four groups of parameters define elastic, viscous, plastic, and thermal
 properties of material.
 Assigned values should have MKS units.
 XML syntax is 
\end_layout

\begin_layout LyX-Code
<param name="parameter"> value </param>
\end_layout

\begin_layout Itemize

\family typewriter
Elastic material parameters
\family default
: lambda, mu Lame's constants.
 
\end_layout

\begin_layout Itemize

\family typewriter
Viscous material parameters
\family default
: 
\family typewriter
refvisc, reftemp, activationE, srexponent, vis_min, 
\family default
and
\family typewriter
 
\begin_inset Newline newline
\end_inset

vis_max 
\end_layout

\begin_deeper
\begin_layout Standard
The following function form of viscosity is assumed by default: 
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
\eta\left(T,\dot{\varepsilon}\right)=\eta_{0}\dot{\varepsilon}^{\left(1/n-1\right)}\exp\left(\frac{E^{*}}{R}\left(\frac{1}{T}-\frac{1}{T_{0}}\right)\right),\label{eq:functionformviscosity}\end{equation}

\end_inset

where 
\begin_inset Formula $\eta_{0}$
\end_inset

 is ``
\family typewriter
refvisc
\family default
'' (Pa), 
\begin_inset Formula $n$
\end_inset

 is ``
\family typewriter
srexponent
\family default
'' (dimensionless integer), 
\begin_inset Formula $E^{*}$
\end_inset

 is ``
\family typewriter
activationE
\family default
'' (J), 
\begin_inset Formula $T_{0}$
\end_inset

 is ``
\family typewriter
reftemp
\family default
'' (
\begin_inset Formula $^{\circ}C$
\end_inset

), 
\begin_inset Formula $,\dot{\varepsilon}$
\end_inset

 is strain rate, and 
\begin_inset Formula $R$
\end_inset

 is the Gas constant.
 ``
\family typewriter
vis_min
\family default
'' and ``
\family typewriter
vis_max
\family default
'' are used to set the range of viscosity variation.
 Other viscosity models can be easily implemented by modifying
\family typewriter
 Constitutive.c
\family default
 in the relevant plugins (
\family typewriter
SnacMaxwell
\family default
 and 
\family typewriter
SnacViscoPlastic
\family default
).
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
Plastic material parameters
\family default
 
\end_layout

\begin_deeper
\begin_layout Standard
Plastic parameters can dynamically vary and are approximated by piecewise
 linear function of accumulated plastic strain.
 So, the number of linear segments is defined first by 
\family typewriter
nsegments
\family default
.
 If 
\family typewriter
nsegments
\family default
 is n, n+1 values of parameters are required to define the n linear segments.
 
\end_layout

\begin_layout Standard
The working plasticity models in SNAC is Mohr-Coulomb.
 The Drucker-Prager model has been implemented but not verified.
 The corresponding parameter name is 
\family typewriter
yieldcriterion
\family default
, and the legitimate values it can assume are 
\family typewriter
mohrcoulomb
\family default
 and 
\family typewriter
druckerprager
\family default
.
 
\end_layout

\begin_layout Standard
Three parameters are necessary to define each model's yield function: friction
 angle, dilation angle, and cohesion.
 The parameters should be named as ``parameter + [0,â¦,n].'' So the input
 file should have 
\family typewriter
frictionAngle0, frictionAngle1, 
\family default
...; 
\family typewriter
dilationAngle0, dilationAngle1, 
\family default
...; and 
\family typewriter
cohession0, cohesion1,
\family default
....
\end_layout

\begin_layout Standard
To avoid a singularity of the yield surface at the tensional limit, SNAC
 defines 
\family typewriter
tension_off
\family default
, a practical limit to tensional stress over which yielding occurs even
 if the stress state is not on the yield surface.
 The following is an example of defining plastic material parameters:
\end_layout

\begin_layout LyX-Code
<param name="nsegments"> 
\end_layout

\begin_layout LyX-Code
    2</param> 
\end_layout

\begin_layout LyX-Code
<param name="plstrain0"> 
\end_layout

\begin_layout LyX-Code
    0.0</param> 
\end_layout

\begin_layout LyX-Code
<param name="plstrain1"> 
\end_layout

\begin_layout LyX-Code
    0.1</param> 
\end_layout

\begin_layout LyX-Code
<param name="plstrain2">  
\end_layout

\begin_layout LyX-Code
    1000.0</param> 
\end_layout

\begin_layout LyX-Code
<param name="frictionAngle0"> 
\end_layout

\begin_layout LyX-Code
    30.0</param> 
\end_layout

\begin_layout LyX-Code
<param name="frictionAngle1"> 
\end_layout

\begin_layout LyX-Code
    20.0</param> 
\end_layout

\begin_layout LyX-Code
<param name="frictionAngle2"> 
\end_layout

\begin_layout LyX-Code
    20.0</param> 
\end_layout

\begin_layout LyX-Code
<param name="dilationAngle0"> 
\end_layout

\begin_layout LyX-Code
    5.0</param> 
\end_layout

\begin_layout LyX-Code
<param name="dilationAngle1"> 
\end_layout

\begin_layout LyX-Code
    5.0</param> 
\end_layout

\begin_layout LyX-Code
<param name="dilationAngle2"> 
\end_layout

\begin_layout LyX-Code
    5.0</param> 
\end_layout

\begin_layout LyX-Code
<param name="cohesion0"> 
\end_layout

\begin_layout LyX-Code
    4.0e+07</param> 
\end_layout

\begin_layout LyX-Code
<param name="cohesion1"> 
\end_layout

\begin_layout LyX-Code
    1.0e+06</param> 
\end_layout

\begin_layout LyX-Code
<param name="cohesion2"> 
\end_layout

\begin_layout LyX-Code
    1.0e+06</param> 
\end_layout

\begin_layout LyX-Code
<param name="ten_off"> 
\end_layout

\begin_layout LyX-Code
    1.0e+13</param>
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
Thermal material parameters
\family default
 
\end_layout

\begin_deeper
\begin_layout Standard
Values of thermal conductivity and heat capacity can be defined.
 The parameter names are 
\family typewriter
thermal_
\end_layout

\begin_layout Standard

\family typewriter
conduct
\family default
 and 
\family typewriter
heatCapacity
\family default
, and appropriate values in MKS unit should be assigned.
 The default values are 2.0 W/(m
\begin_inset Formula $\cdot$
\end_inset

K) and 1000.0 J/(kg
\begin_inset Formula $\cdot$
\end_inset

K), respectively.
 To be used for initial and boundary conditions, temperature values in 
\begin_inset Formula $^{\circ}C$
\end_inset

 can be assigned to 
\family typewriter
topTemp
\family default
 and 
\family typewriter
bottomTemp
\family default
.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
Remesher parameters
\family default
 
\end_layout

\begin_deeper
\begin_layout Standard
Remeshing is triggered when the mesh is distorted too much.
 The criteria to determine when to remesh are the number of time steps and
 the minimum length scale.
 The former requires 
\emph on
a priori
\emph default
 knowledge on the rate of deformation because SNAC's remeshing algorithm
 would fail if the displacement is larger than one-element size.
 Using this criterion makes it convenient to force remeshing on a regular
 basis.
 The latter criterion allows SNAC to have a dynamically determined frequency
 of remeshing.
 The length scale is the global minimum of the ratio of a tetrahedron's
 volume to one of its surface area.
 If this minimum length scale decreases below some fraction of the initial
 value, remeshing is triggered.
 The parameter name for the type of criterion is 
\family typewriter
remeshCondition
\family default
, of which possible values are 
\family typewriter
onTimeStep
\family default
, 
\family typewriter
onMinLengthScale
\family default
, and 
\family typewriter
onBothTimeStepLength
\family default
.
 The critical value for time step and minimum length scale should be provided.
 
\family typewriter
remeshLoopCriterion
\family default
 and 
\family typewriter
remeshLengthCriterion
\family default
 are the parameter names, and they take a positive integer and a positive
 number less than 1 as values, respectively.
\end_layout

\begin_layout LyX-Code
<param name="remeshCondition"> 
\end_layout

\begin_layout LyX-Code
    onBothLoopLength</param> 
\end_layout

\begin_layout LyX-Code
<param name="remeshLoopCriterion"> 
\end_layout

\begin_layout LyX-Code
    10</param> 
\end_layout

\begin_layout LyX-Code
<param name="remeshLengthCriterion"> 
\end_layout

\begin_layout LyX-Code
    0.5</param>
\end_layout

\end_deeper
\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Initial-Conditions-Structure"

\end_inset

Initial Conditions Structure 
\end_layout

\begin_layout Standard
Two structures need to be constructed for defining the initial conditions.
 One is for variables associated with nodes, the other for the element-associate
d ones.
 A name is assigned to the structure first.
 This structure will have only a single list as a member.
 This list in turn can have a series of structures of which members are
 the type of initial conditions and the list of variables.
 Finally, the list of variables has structures for each variable to be initializ
ed.
 The lowest level structure will have name, type and value for the variable.
 The following is an example of constructing such a structure.
 
\end_layout

\begin_layout LyX-Code

\size small
<!-- node ICs: initical conditions for nodal variables, i.e., velocity and
 temperature --> 
\end_layout

\begin_layout LyX-Code

\size small
    <struct name="nodeICs"> 
\end_layout

\begin_layout LyX-Code

\size small
        <list name="vcList"> 
\end_layout

\begin_layout LyX-Code

\size small
            <struct> 
\end_layout

\begin_layout LyX-Code

\size small
                <param name="type"> 
\end_layout

\begin_layout LyX-Code

\size small
                    AllNodesVC</param> 
\end_layout

\begin_layout LyX-Code

\size small
                <list name="variables"> 
\end_layout

\begin_layout LyX-Code

\size small
                    <struct> 
\end_layout

\begin_layout LyX-Code

\size small
                        <param name="name"> 
\end_layout

\begin_layout LyX-Code

\size small
                            vx</param> 
\end_layout

\begin_layout LyX-Code

\size small
                        <param name="type"> 
\end_layout

\begin_layout LyX-Code

\size small
                            double</param> 
\end_layout

\begin_layout LyX-Code

\size small
                        <param name="value">      
\end_layout

\begin_layout LyX-Code

\size small
                            0</param> 
\end_layout

\begin_layout LyX-Code

\size small
                    </struct> 
\end_layout

\begin_layout LyX-Code

\size small
                    <struct> 
\end_layout

\begin_layout LyX-Code

\size small
                        <param name="name"> 
\end_layout

\begin_layout LyX-Code

\size small
                            vy</param> 
\end_layout

\begin_layout LyX-Code

\size small
                        <param name="type"> 
\end_layout

\begin_layout LyX-Code

\size small
                            double</param> 
\end_layout

\begin_layout LyX-Code

\size small
                        <param name="value"> 
\end_layout

\begin_layout LyX-Code

\size small
                            0</param> 
\end_layout

\begin_layout LyX-Code

\size small
                    </struct> 
\end_layout

\begin_layout LyX-Code

\size small
                    <struct> 
\end_layout

\begin_layout LyX-Code

\size small
                        <param name="name">   
\end_layout

\begin_layout LyX-Code

\size small
                            vz</param> 
\end_layout

\begin_layout LyX-Code

\size small
                        <param name="type"> 
\end_layout

\begin_layout LyX-Code

\size small
                            double</param> 
\end_layout

\begin_layout LyX-Code

\size small
                        <param name="value"> 
\end_layout

\begin_layout LyX-Code

\size small
                            0</param> 
\end_layout

\begin_layout LyX-Code

\size small
                     </struct> 
\end_layout

\begin_layout LyX-Code

\size small
                </list> 
\end_layout

\begin_layout LyX-Code

\size small
            </struct> 
\end_layout

\begin_layout LyX-Code

\size small
            <struct> 
\end_layout

\begin_layout LyX-Code

\size small
                <param name="type"> 
\end_layout

\begin_layout LyX-Code

\size small
                     AllNodesVC</param> 
\end_layout

\begin_layout LyX-Code

\size small
                <list name="variables"> 
\end_layout

\begin_layout LyX-Code

\size small
                    <struct> 
\end_layout

\begin_layout LyX-Code

\size small
                        <param name="name"> 
\end_layout

\begin_layout LyX-Code

\size small
                            temperature</param> 
\end_layout

\begin_layout LyX-Code

\size small
                        <param name="type"> 
\end_layout

\begin_layout LyX-Code

\size small
                            double</param> 
\end_layout

\begin_layout LyX-Code

\size small
                        <param name="value"> 
\end_layout

\begin_layout LyX-Code

\size small
                            500.0</param> <!-- in degrees Celsius -->
\end_layout

\begin_layout LyX-Code

\size small
                    </struct> 
\end_layout

\begin_layout LyX-Code

\size small
                </list> 
\end_layout

\begin_layout LyX-Code

\size small
            </struct> 
\end_layout

\begin_layout LyX-Code

\size small
        </list> 
\end_layout

\begin_layout LyX-Code

\size small
    </struct> 
\end_layout

\begin_layout LyX-Code

\size small
<!-- element ICs: initial conditions for elemental variables.
 Currently, material type is not used.
\begin_inset Newline newline
\end_inset

 The block for hydrostatic pressure should be accompanied by ``SnacHydroStaticIC
'' module in the above 
\begin_inset Newline newline
\end_inset

 module list.
 --> 
\end_layout

\begin_layout LyX-Code

\size small
    <struct name="elementICs"> 
\end_layout

\begin_layout LyX-Code

\size small
        <list name="vcList"> 
\end_layout

\begin_layout LyX-Code

\size small
            <struct> 
\end_layout

\begin_layout LyX-Code

\size small
                <param name="type"> 
\end_layout

\begin_layout LyX-Code

\size small
                    AllElementsVC</param> 
\end_layout

\begin_layout LyX-Code

\size small
                <list name="variables"> 
\end_layout

\begin_layout LyX-Code

\size small
                    <struct> 
\end_layout

\begin_layout LyX-Code

\size small
                        <param name="name"> 
\end_layout

\begin_layout LyX-Code

\size small
                            elementMaterial</param> 
\end_layout

\begin_layout LyX-Code

\size small
                        <param name="type"> 
\end_layout

\begin_layout LyX-Code

\size small
                            int</param> 
\end_layout

\begin_layout LyX-Code

\size small
                        <param name="value"> 
\end_layout

\begin_layout LyX-Code

\size small
                            0</param> 
\end_layout

\begin_layout LyX-Code

\size small
                    </struct> 
\end_layout

\begin_layout LyX-Code

\size small
                </list> 
\end_layout

\begin_layout LyX-Code

\size small
            </struct> 
\end_layout

\begin_layout LyX-Code

\size small
        </list> 
\end_layout

\begin_layout LyX-Code

\size small
    </struct>
\end_layout

\begin_layout Standard
Note that the type of the data structure used for initial conditions in
 StGermain are 
\family typewriter
AllNodesVC
\family default
 and 
\family typewriter
AllElementsVC
\family default
.
 These types are used to assign values to all the nodes or elements (see
 Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Boundary-Conditions-Structure"

\end_inset

 for other types of structure).
 
\end_layout

\begin_layout Standard
One way of assigning a value to all nodes or elements is to put a single
 value for the ``value'' member in the lowest-level structure as in the
 next example:
\end_layout

\begin_layout LyX-Code

\size small
<struct>
\end_layout

\begin_layout LyX-Code

\size small
    <param name="name"> 
\end_layout

\begin_layout LyX-Code

\size small
        temperature</param> 
\end_layout

\begin_layout LyX-Code

\size small
    <param name="type"> 
\end_layout

\begin_layout LyX-Code

\size small
        double</param> 
\end_layout

\begin_layout LyX-Code

\size small
    <param name="value"> 
\end_layout

\begin_layout LyX-Code

\size small
        500.0</param> 
\end_layout

\begin_layout LyX-Code

\size small
</struct>
\end_layout

\begin_layout Standard
The other way is to define a 
\emph on
condition function
\emph default
 and assign ``func
\begin_inset Quotes srd
\end_inset

 to type and the function's name to value.
 More details are given in the section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Using-condition-functions"

\end_inset

.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Boundary-Conditions-Structure"

\end_inset

Boundary Conditions Structure 
\end_layout

\begin_layout Standard
The syntax to define a structure for boundary conditions is almost the same
 with the initial conditions.
 As in the case of initial conditions, a user can reuse most parts of the
 listing given below.
 For example, the name of the highest-level structure, 
\family typewriter
velocityBCs
\family default
, need not be changed for every different problem.
 Thus, only a few notable differences are addressed here.
\end_layout

\begin_layout Standard
The value for the type of the second-level structure is 
\family typewriter
wallVC
\family default
.
 This structure type requires specifying which ``wall'' to apply boundary
 conditions to.
 For SNAC, one of left, right, top, bottom, back, or front can be assigned
 to a parameter named 
\family typewriter
wall
\family default
.
 Those six values represent surfaces of which nodes have minimum x index,
 maximum x index, minimum y index, maximum y index, minimum z index, and
 maximum z index, respectively.
 By including the following listing in an input XML file, the x component
 of velocity of all the nodes belonging to the model's left wall will have
 the value ``-5.0e-08 (m/s)'' as a double precision number:
\end_layout

\begin_layout LyX-Code

\size small
<struct name="velocityBCs"> 
\end_layout

\begin_layout LyX-Code

\size small
    <list name="vcList"> 
\end_layout

\begin_layout LyX-Code

\size small
        <struct> 
\end_layout

\begin_layout LyX-Code

\size small
            <param name="type"> 
\end_layout

\begin_layout LyX-Code

\size small
                WallVC</param>  
\end_layout

\begin_layout LyX-Code

\size small
            <param name="wall"> 
\end_layout

\begin_layout LyX-Code

\size small
                left</param> 
\end_layout

\begin_layout LyX-Code

\size small
            <list name="variables"> 
\end_layout

\begin_layout LyX-Code

\size small
                <struct> 
\end_layout

\begin_layout LyX-Code

\size small
                    <param name="name"> 
\end_layout

\begin_layout LyX-Code

\size small
                        vx</param> 
\end_layout

\begin_layout LyX-Code

\size small
                    <param name="type"> 
\end_layout

\begin_layout LyX-Code

\size small
                        double</param> 
\end_layout

\begin_layout LyX-Code

\size small
                    <param name="value"> 
\end_layout

\begin_layout LyX-Code

\size small
                        -5.0e-08</param> 
\end_layout

\begin_layout LyX-Code

\size small
                </struct> 
\end_layout

\begin_layout LyX-Code

\size small
             </list> 
\end_layout

\begin_layout LyX-Code

\size small
         </struct> 
\end_layout

\begin_layout LyX-Code

\size small
    </list> 
\end_layout

\begin_layout LyX-Code

\size small
</struct>
\end_layout

\begin_layout Standard
It is straightforward to apply boundary conditions for other components
 of velocity on the same wall.
 One can simply put something like 
\end_layout

\begin_layout LyX-Code

\size small
<struct> 
\end_layout

\begin_layout LyX-Code

\size small
    <param name="name"> 
\end_layout

\begin_layout LyX-Code

\size small
        vy</param> 
\end_layout

\begin_layout LyX-Code

\size small
    <param name="type"> 
\end_layout

\begin_layout LyX-Code

\size small
        double</param> 
\end_layout

\begin_layout LyX-Code

\size small
    <param name="value"> 
\end_layout

\begin_layout LyX-Code

\size small
        -1.0e-08</param> 
\end_layout

\begin_layout LyX-Code

\size small
</struct> 
\end_layout

\begin_layout Standard
between 
\family typewriter
<list name="variables">
\family default
 and 
\family typewriter
</list>
\family default
.
 However, to work on other walls than ``left,'' one needs to replicate a
 higher-level structure.
 The other way of applying boundary conditions is to put ``
\family typewriter
func
\family default
'' in the ``
\family typewriter
type
\family default
'' member and the function's name in the ``
\family typewriter
value
\family default
'' member as follows:
\end_layout

\begin_layout LyX-Code

\size small
<struct> 
\end_layout

\begin_layout LyX-Code

\size small
    <param name="name"> 
\end_layout

\begin_layout LyX-Code

\size small
        vx</param> 
\end_layout

\begin_layout LyX-Code

\size small
    <param name="type"> 
\end_layout

\begin_layout LyX-Code

\size small
        func</param> 
\end_layout

\begin_layout LyX-Code

\size small
    <param name="value"> 
\end_layout

\begin_layout LyX-Code

\size small
        variableVx</param> 
\end_layout

\begin_layout LyX-Code

\size small
</struct>
\end_layout

\begin_layout Standard
This kind of function is called a 
\emph on
condition function
\emph default
 and should be defined in one of the loaded plugins.
 One can find an example in 
\family typewriter
TestCondition.c
\family default
 in the 
\family typewriter
SnacSpherical
\family default
 pluginâs source code directory.
 Using this function makes it possible to assign values varying according
 to the spatial positions, or the indexes of each element.
 For more details, see Sec.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Using-condition-functions"

\end_inset

.
\end_layout

\begin_layout Standard
In most situations, a user can keep the overall structure as it is in the
 above example and would have only to modify the lowest level structure.
\end_layout

\begin_layout Standard
The temperature boundary conditions take the same structure.
 The following example shows how to apply a uniform temperature of 500.0
\begin_inset Formula $^{\circ}C$
\end_inset

 to all the top surface nodes:
\end_layout

\begin_layout LyX-Code

\size small
<!-- Temperature BCs --> 
\end_layout

\begin_layout LyX-Code

\size small
    <struct name="temperatureBCs"> 
\end_layout

\begin_layout LyX-Code

\size small
        <list name="vcList"> 
\end_layout

\begin_layout LyX-Code

\size small
            <struct> 
\end_layout

\begin_layout LyX-Code

\size small
                <param name="type"> 
\end_layout

\begin_layout LyX-Code

\size small
                    WallVC</param> 
\end_layout

\begin_layout LyX-Code

\size small
                <param name="wall"> 
\end_layout

\begin_layout LyX-Code

\size small
                    top</param> 
\end_layout

\begin_layout LyX-Code

\size small
                <list name="variables"> 
\end_layout

\begin_layout LyX-Code

\size small
                    <struct> 
\end_layout

\begin_layout LyX-Code

\size small
                        <param name="name"> 
\end_layout

\begin_layout LyX-Code

\size small
                            temperature</param> 
\end_layout

\begin_layout LyX-Code

\size small
                        <param name="type"> 
\end_layout

\begin_layout LyX-Code

\size small
                            double</param> 
\end_layout

\begin_layout LyX-Code

\size small
                        <param name="value"> 
\end_layout

\begin_layout LyX-Code

\size small
                            500.0</param> 
\end_layout

\begin_layout LyX-Code

\size small
                    </struct> 
\end_layout

\begin_layout LyX-Code

\size small
                </list> 
\end_layout

\begin_layout LyX-Code

\size small
            </struct> 
\end_layout

\begin_layout LyX-Code

\size small
        </list> 
\end_layout

\begin_layout LyX-Code

\size small
    </struct>
\end_layout

\begin_layout Standard
Again, one can replace the double type of the lowest-level structure with
 ``func'' to use a condition function.
 In that case, the functionâs name should be supplied as the structure's
 value.
\end_layout

\begin_layout Section
Using Condition Functions
\begin_inset CommandInset label
LatexCommand label
name "sec:Using-condition-functions"

\end_inset


\end_layout

\begin_layout Standard
Condition functions (CFs) can be used to define both spatially and temporally
 non-uniform initial and boundary conditions.
 Two requirements should be met for a condition function to make effects:
 1) a CF must be found at run-time and 2) an input file should specify where
 to apply it.
 The first condition is satisfied by properly adding a function in the SnacCondF
unc plugin and the second by setting the 
\family typewriter
type
\family default
 of variables to be 
\family typewriter
func
\family default
 (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Initial-Conditions-Structure"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Boundary-Conditions-Structure"

\end_inset

).
\end_layout

\begin_layout Subsection
Adding a new condition function
\end_layout

\begin_layout Standard
Everything is done in 
\family typewriter
Snac/plugins/conditionFunctions
\family default
.
 The example below shows the step-by-step procedure for adding a new element
 CF.
 A new node CF can be added in the same way but by modifying counterparts
 for node.
\end_layout

\begin_layout Enumerate
Go to 
\family typewriter
Snac/plugins/conditionFunctions.
\end_layout

\begin_layout Enumerate
Open 
\family typewriter
SnacCondFunc_ElementCondFunc.h
\family default
.
\end_layout

\begin_deeper
\begin_layout Enumerate
Copy and paste one of the existing function declarations and rename it (e.g.,
 
\family typewriter
void _SnacCondFunc_DeadSea
\family default
 
\begin_inset Formula $\rightarrow$
\end_inset


\family typewriter
void _SnacCondFunc_MyTest
\family default
).
\end_layout

\end_deeper
\begin_layout Enumerate
Open 
\family typewriter
SnacCondFunc_ElementCondFunc.c
\end_layout

\begin_deeper
\begin_layout Enumerate
Copy and paste one of the existing function definitions and rename it (e.g.,
 
\family typewriter
void _SnacCondFunc_DeadSea(...)
\family default
 
\begin_inset Formula $\rightarrow$
\end_inset


\family typewriter
void _SnacCondFunc_MyTest(...)
\family default
).
\end_layout

\begin_layout Enumerate
Change the contents of the new function (e.g., remove all the 
\family typewriter
if
\family default
-statement blocks except the first one).
\end_layout

\end_deeper
\begin_layout Enumerate
Open 
\family typewriter
Register.c
\family default
.
\end_layout

\begin_deeper
\begin_layout Enumerate
Copy and paste one of the existing function calls to 
\family typewriter
ConditionFunction_Register_Add
\family default
.
\end_layout

\begin_layout Enumerate
Note that the third argument of 
\family typewriter
ConditionFunction_Register_Add
\family default
 is also a function call to 
\family typewriter
ConditionFunction_New
\family default
, which takes two arguments.
\end_layout

\begin_layout Enumerate
Change both arguments of 
\family typewriter
ConditionFunction_New
\family default
 : 
\family typewriter
ConditionFunction_new(_SnacCondFunc_DeadSea, ``SnacCF_DeadSea
\begin_inset Quotes srd
\end_inset

)
\family default

\begin_inset Formula $\rightarrow$
\end_inset


\family typewriter
ConditionFunction_new(_SnacCondFunc_MyTest, ``SnacCF_MyTest
\begin_inset Quotes srd
\end_inset

)
\family default
.
 The string, 
\family typewriter
``SnacCF_MyTest
\begin_inset Quotes srd
\end_inset

,
\family default
 will be used in an input file.
\end_layout

\end_deeper
\begin_layout Enumerate
Rebuild the plugin: i.e., run 
\family typewriter
make
\family default
.
\end_layout

\begin_layout Subsection
Using a newly defined condition function
\end_layout

\begin_layout Standard
Continuing from the above example, we have only one place to use an element
 condition function, which is 
\family typewriter
elementICs
\family default
.
\end_layout

\begin_layout LyX-Code

\size small
<struct name="elementICs"> 
\end_layout

\begin_layout LyX-Code

\size small
    <list name="vcList"> 
\end_layout

\begin_layout LyX-Code

\size small
        <struct> 
\end_layout

\begin_layout LyX-Code

\size small
            <param name="type"> AllElementsVC</param> 
\end_layout

\begin_layout LyX-Code

\size small
            <list name="variables"> 
\end_layout

\begin_layout LyX-Code

\size small
                <struct> 
\end_layout

\begin_layout LyX-Code

\size small
                    <param name="name"> elementMaterial</param> 
\end_layout

\begin_layout LyX-Code

\size small
                    <param name="type"> int </param> 
\end_layout

\begin_layout LyX-Code

\size small
                    <param name="value"> 0</param> 
\end_layout

\begin_layout LyX-Code

\size small
                 </struct> 
\end_layout

\begin_layout LyX-Code

\size small
             </list> 
\end_layout

\begin_layout LyX-Code

\size small
         </struct> 
\end_layout

\begin_layout LyX-Code

\size small
     </list> 
\end_layout

\begin_layout LyX-Code

\size small
 </struct>
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Standard
In the above code, the 
\family typewriter
type
\family default
 parameter for the ``
\family typewriter
variables
\family default
`` list should be changed from 
\family typewriter
int
\family default
 to 
\family typewriter
func
\family default
 and the 
\family typewriter
value
\family default
 parameter should be the string used when the condition function was registered.
 It is 
\family typewriter
``SnacCF_MyTest
\begin_inset Quotes srd
\end_inset


\family default
 in the current example.
 The modified code would look like
\end_layout

\begin_layout LyX-Code

\size small
<struct name="elementICs"> 
\end_layout

\begin_layout LyX-Code

\size small
    <list name="vcList"> 
\end_layout

\begin_layout LyX-Code

\size small
        <struct> 
\end_layout

\begin_layout LyX-Code

\size small
            <param name="type"> AllElementsVC</param> 
\end_layout

\begin_layout LyX-Code

\size small
            <list name="variables"> 
\end_layout

\begin_layout LyX-Code

\size small
                <struct> 
\end_layout

\begin_layout LyX-Code

\size small
                    <param name="name"> elementMaterial</param> 
\end_layout

\begin_layout LyX-Code

\size small
                    <param name="type"> func </param> 
\end_layout

\begin_layout LyX-Code

\size small
                    <param name="value"> SnacCF_MyTest </param> 
\end_layout

\begin_layout LyX-Code

\size small
                 </struct> 
\end_layout

\begin_layout LyX-Code

\size small
             </list> 
\end_layout

\begin_layout LyX-Code

\size small
         </struct> 
\end_layout

\begin_layout LyX-Code

\size small
     </list> 
\end_layout

\begin_layout LyX-Code

\size small
 </struct>
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Standard
Finally, load the ``SnacCondFunc
\begin_inset Quotes srd
\end_inset

 plugin as follows:
\end_layout

\begin_layout LyX-Code
<list name="extensions"> 		
\end_layout

\begin_layout LyX-Code
    
\begin_inset Formula $\vdots$
\end_inset

    
\end_layout

\begin_layout LyX-Code
    <param> SnacCondFunc </param>
\end_layout

\begin_layout LyX-Code
</list>
\end_layout

\begin_layout Standard
Run SNAC and check if the condition function works as intended by visualizing
 the ``
\family typewriter
Phase
\family default

\begin_inset Quotes srd
\end_inset

 variable.
\end_layout

\begin_layout Section
Checkpointing and Restarting
\begin_inset CommandInset label
LatexCommand label
name "sec:Checkpointing-and-Restarting"

\end_inset


\end_layout

\begin_layout Subsection
Checkpointing
\end_layout

\begin_layout Standard
To restart an already finished run from a certain point in time, it is necessary
 to record all the relevant information.
 Generating such data set is called 
\emph on
checkpointing
\emph default
.
 It is possible to checkpoint as a response to an emergency like receiving
 a certain type of error or disk quota and wall clock limit soon to be exceeded.
 However, SNAC currently only allows a user to specify the frequency of
 checkpointing by assigning a non-zero value to 
\begin_inset Quotes sld
\end_inset


\family typewriter
checkpointEvery
\family default

\begin_inset Quotes srd
\end_inset

 in an input file.
 The meaning of the assigned value is the same with 
\begin_inset Quotes sld
\end_inset


\family typewriter
dumpEvery
\family default

\begin_inset Quotes srd
\end_inset

: 
\emph on
the number of time steps between events of checkpointing
\emph default
.
 The default value of this parameter is 0, and SNAC checkpoints only at
 the last time step.
 Since the size of checkpoint data files is much larger than that of the
 regular outputs, it is advised to set 
\family typewriter
checkpointEvery
\family default
 to be a sufficiently large value.
\end_layout

\begin_layout Standard
Just as dumping is logged in 
\family typewriter
timeStep.0
\family default
, checkpointing is logged in 
\family typewriter
checkpointTimeStep.0
\family default
.
 This file is used when restart files are generated.
\end_layout

\begin_layout Standard
Checkpoint data files have 
\family typewriter
CP
\family default
 attached to their names (e.g., 
\family typewriter
velocityCP.0
\family default
, 
\family typewriter
stressTensorCP.2
\family default
, etc.).
 The major difference between the checkpointed (tetrahedral) outputs and
 the regular (hexahedral) outputs is the storing format of element-associated
 variables such as stress and plastic strain.
 To restart with exactly the same state as before, those values need to
 be recorded at the tetrahedra level.
 That is because the regular outputs contain one single-precision floating
 point number per hexahedral element.
\end_layout

\begin_layout Subsection
Restarting
\begin_inset CommandInset label
LatexCommand label
name "sub:Restarting"

\end_inset


\end_layout

\begin_layout Enumerate
Run 
\family typewriter
snac2restart
\family default
 in the original 
\family typewriter
outputPath
\family default
 (see the next section for more details).
 
\end_layout

\begin_layout Enumerate
Create a new directory for the restarting run.
 This is mandatory to prevent accidental overwriting of the existing data
 files.
\end_layout

\begin_layout Enumerate
Move all the 
\family typewriter
*.restart
\family default
 files to the new directory.
\end_layout

\begin_layout Enumerate
Prepare an input file that is identical with the one used for the original
 run except that 
\end_layout

\begin_deeper
\begin_layout Enumerate
the new one has 
\begin_inset Quotes sld
\end_inset


\family typewriter
SnacRestart
\family default

\begin_inset Quotes srd
\end_inset

 in the extensions (=plugins) list 
\emph on
AND
\end_layout

\begin_layout Enumerate
\begin_inset Quotes sld
\end_inset


\family typewriter
restartTimestep
\family default

\begin_inset Quotes srd
\end_inset

 is set to be the time step to restart from 
\emph on
AND
\end_layout

\begin_layout Enumerate
\begin_inset Quotes sld
\end_inset


\family typewriter
outputPath
\family default

\begin_inset Quotes srd
\end_inset

 now points to where 
\family typewriter
*.restart
\family default
 files are.
 SNAC will abort if it detects existing outputs there.
\end_layout

\end_deeper
\begin_layout Enumerate
Start running SNAC as usual but with a new input file prepared as above.
\end_layout

\begin_layout Subsection

\family typewriter
snac2restart
\end_layout

\begin_layout Standard
The general usage of 
\family typewriter
snac2restart
\family default
 is 
\end_layout

\begin_layout LyX-Code
Usage: snac2restart [timeStep] [your "outputPath"] [path to write restart
 files]
\end_layout

\begin_layout Standard

\family typewriter
timeStep
\family default
 is one of the checkpointed time steps and should be one of those recorded
 in 
\family typewriter
checkpointTimeStep.0
\family default
.
 The last two specify a path to where those output files are which need
 processing, and where to write the processed restart files, respectively.
 All the arguments are optional and, by default, 
\family typewriter
snac2restart
\family default
 tries to read and write in the current directory and process for the last
 time step recorded.
 Files with the suffix of *.restart are created.
\end_layout

\begin_layout Chapter
Postprocessing and Graphics 
\end_layout

\begin_layout Section
Introduction 
\end_layout

\begin_layout Standard
SNAC writes binary output files which must be converted to a file format
 that external visualization tools can handle.
 Two such conversion programs are provided.
 One generates Visualization Tool Kit (VTK) files.
 The other is for the open-source Open Visualization Data Explorer, better
 known as OpenDX.
 There are several programs that can visualize VTK files: ParaView 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

www.paraview.org
\end_layout

\end_inset

, MayaVi2 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://svn.enthought.com/enthought/wiki/MayaVi
\end_layout

\end_inset

, or VisIt 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://wci.llnl.gov/codes/visit/
\end_layout

\end_inset

.
 OpenDX with documentation is available from the OpenDX website 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

www.opendx.org
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Subsection
Outputs from SNAC
\end_layout

\begin_layout Standard
Once you have run SNAC, you should have a series of files in the 
\family typewriter
output
\family default
 directory as set in the input file.
\end_layout

\begin_layout Standard
Information on the parallel decompositon is not explicitly given in an input
 file by a user.
 Instead, StGermain computes an optimal configuration based on the total
 number of processors, the global mesh size, and the value of 
\family typewriter
decompDims
\family default
.
 The resultant global and local element numbers in x, y, and z as well as
 decomposed processor numbers are written in the file 
\family typewriter
sim.0
\family default
, which is common to all the processors.
 
\end_layout

\begin_layout Section
Converting to VTK files
\end_layout

\begin_layout Standard
A program called 
\family typewriter
snac2vtk
\family default
 is provided to convert the binary outputs from SNAC to ascii files in the
 XML VTK Structured Grid format (.vts).
 
\family typewriter
snac2vtk
\family default
 is compiled during the building procedure and installed in 
\family typewriter
${SNAC_BINDIR}
\family default
.
 The usage is
\end_layout

\begin_layout LyX-Code
snac2vtk path-to-outputs [time1 time2].
\end_layout

\begin_layout Standard
The only required argument is a path to output files including 
\family typewriter
sim.0
\family default
, which contains critical information to process data.
 The last two optional arguments are used to set the range of time steps
 for data conversion.
\end_layout

\begin_layout Standard

\family typewriter
snac2vtk
\family default
 automatically generates Parallel VTK Structured Grid files (.pvts) for each
 time step so that there is no need for an extra step to combine data, even
 for the parallel cases.
 It is the group of .pvts files that needs to be loaded in ParaView or another
 visualization tool for VTK.
 However, .vts files should not be removed because .pvts files only refer
 to .vts files rather than contain actual data.
\end_layout

\begin_layout LyX-Code
> snac2vtk ./ 
\family roman
(the last time step only)
\end_layout

\begin_layout Standard
or
\end_layout

\begin_layout LyX-Code
> snac2vtk ./ 10 
\family roman
(from 10th to the last time step)
\end_layout

\begin_layout Standard
or
\end_layout

\begin_layout LyX-Code
> snac2vtk ./ 1 1001 
\family roman
(from 1 to 1001th time step)
\end_layout

\begin_layout Paragraph*
Example list of SNAC output files in the VTK format: 8 processors and 51
 outputs per processor.
\end_layout

\begin_layout LyX-Code
snac.0.000001.vts snac.0.000003.vts snac.0.000005.vts ....
 snac.0.000101.vts 
\end_layout

\begin_layout LyX-Code
snac.1.000001.vts snac.1.000003.vts snac.1.000005.vts ....
 snac.1.000101.vts
\end_layout

\begin_layout LyX-Code
snac.2.000001.vts snac.2.000003.vts snac.2.000005.vts ....
 snac.2.000101.vts
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
snac.7.000001.vts snac.7.000003.vts snac.7.000005.vts ....
 snac.7.000101.vts 
\end_layout

\begin_layout LyX-Code
snac.000001.pvts snac.000003.pvts snac.000005.pvts ....
 snac.000101.pvts
\end_layout

\begin_layout Section
Converting to OpenDX files 
\end_layout

\begin_layout Standard
We recommend that you use VTK files for visualizing model results.
 The conversion tools for the DX file format will no longer be updated.
\end_layout

\begin_layout Standard
To convert binary files into ascii OpenDX files, you need to run the program
 
\family typewriter
snac2dx
\family default
.
 The source code is 
\family typewriter
Snac/snac2dx/snac2dx.c
\family default
, compiled during SNAC's building procedure and placed in 
\family typewriter
${SNAC_BINDIR}
\family default
 together with other executables.
\end_layout

\begin_layout Standard
Running 
\family typewriter
snac2dx
\family default
 without any arguments converts data for all the time steps recorded in
 
\family typewriter
timeStep.0
\family default
.
 Optionally, a range of time steps can be set if two positive integers are
 given as arguments.
 The converted output files are always written in the directory where 
\family typewriter
snac2dx
\family default
 is run.
 The naming convention for the ascii dx files is 
\family typewriter
snac.{processor ID}.{time step in 6 digits}.dx
\family default
.
\end_layout

\begin_layout Standard
To visualize outputs from a parallel run, one more step is needed to combine
 the .dx files into a single dx file for each time step.
 A Python script, 
\family typewriter
snac_combine.py
\family default
, is provided for this purpose.
 This script is under 
\family typewriter
Snac/snac2dx
\family default
, but not automatically installed in 
\family typewriter
${SNAC_BINDIR}
\family default
.
 The following eight arguments are required:
\end_layout

\begin_layout Itemize

\series bold
modelname
\series default
: Suffix for the combined data files.
 
\family typewriter
``snac
\family default
'' unless snac2dx.c is modified.
\end_layout

\begin_layout Itemize

\series bold
timestep
\series default
: Time step of interest.
\end_layout

\begin_layout Itemize

\series bold
gnodex gnodey gnodez
\series default
: Global node numbers in x, y, and z (lon, radius, lat) as set in the input
 file.
\end_layout

\begin_layout Itemize

\series bold
nprocx nprocy nprocz
\series default
: Number of processors in x, y, and z (lon, radius, lat) calculated based
 on 
\family typewriter
sim.0
\family default
.
\end_layout

\begin_layout Paragraph*
Example list of SNAC output files in the OpenDX format: 8 processors and
 51 outputs per processor.
\end_layout

\begin_layout LyX-Code
snac.0.000001.dx snac.0.000003.dx snac.0.000005.dx ....
 snac.0.000101.dx 
\end_layout

\begin_layout LyX-Code
snac.1.000001.dx snac.1.000003.dx snac.1.000005.dx ....
 snac.1.000101.dx 
\end_layout

\begin_layout LyX-Code
snac.2.000001.dx snac.2.000003.dx snac.2.000005.dx ....
 snac.2.000101.dx 
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
snac.7.000001.dx snac.7.000003.dx snac.7.000005.dx ....
 snac.7.000101.dx 
\end_layout

\begin_layout Standard
Let's assume that the global mesh has 51 
\begin_inset Formula $\times$
\end_inset

 31 
\begin_inset Formula $\times$
\end_inset

 41 nodes and was decomposed in 3D (
\family typewriter
decompDims
\family default
=3) by 8 processors.
 Also, we assume that the contents of 
\family typewriter
sim.0
\family default
 is ``25 15 20''.
 We can then infer that 2 processors were assigned in each dimension.
\end_layout

\begin_layout Standard
To get a combined dx file for time step 35:
\end_layout

\begin_layout LyX-Code
> snac_combine.py snac 35 51 31 41 2 2 2
\end_layout

\begin_layout Standard
The name of a combined file has the format of ``
\family typewriter
snac.{time step in 6 digits}.dx
\family default

\begin_inset Quotes srd
\end_inset

.
 So ``
\family typewriter
snac.000035.dx
\family default
'' should be the final product in the above example.
\end_layout

\begin_layout Subsection
Using OpenDX
\end_layout

\begin_layout Standard
An OpenDX visual program, 
\family typewriter
snac_visualize.net
\family default
, is provided for convenience and is placed in 
\family typewriter
Snac/snac2dx
\family default
.
 It can be opened in OpenDX to read data, map node- and element-based variables
 on the domain, visualize vector quantities as 3D glyphs, create isosurfaces,
 and make cross-sections.
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "cha:Cookbook-Examples"

\end_inset

Cookbook Examples
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Example-1:-Rifting"

\end_inset

Cookbook 1: Rifting of elasto-visco-plastic lithosphere
\end_layout

\begin_layout Standard
A 3D Cartesian block of elaso-visco-plastic material is extended by the
 velocities applied to two side walls.
 The domain has a size of 40
\begin_inset space ~
\end_inset


\begin_inset Formula $\times$
\end_inset


\begin_inset space ~
\end_inset

10
\begin_inset space ~
\end_inset


\begin_inset Formula $\times$
\end_inset


\begin_inset space ~
\end_inset

80 km and is discretized into 20
\begin_inset space ~
\end_inset


\begin_inset Formula $\times$
\end_inset


\begin_inset space ~
\end_inset

5
\begin_inset space ~
\end_inset


\begin_inset Formula $\times$
\end_inset


\begin_inset space ~
\end_inset

40 elements (Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:example-problem"

\end_inset

a).
\end_layout

\begin_layout Standard
The two side walls perpendicular to the x-axis are pulled at a constant
 velocity of 1 cm/yr.
 The other two side walls have free-slip conditions.
 The bottom surface is supported by the Winkler restoring forces.
\end_layout

\begin_layout Standard
An initial temperature field is generated by a condition function that makes
 a horizontally uniform temperature field with a constant vertical gradient.
 The boundary conditions fix the top and bottom temperature at their initial
 values (0 and 700
\begin_inset Formula $^{\circ}C$
\end_inset

, respectively) to keep the steady state.
\end_layout

\begin_layout Standard
The Mohr-Coulomb model is used with a two-step strain weakening.
 Cohesion decreases from 40 MPa to 0.4 MPa as the second invariant of plastic
 strain grows up to 2% but remains constant at 0.4 MPa thereafter.
 Note that extremely large values of vis_min/max are chosen such that viscosity
 is uniformly high and thus no viscous flow is allowed.
\end_layout

\begin_layout Standard
A finite value of plastic strain (2% in this problem) is assigned to a set
 of elements.
 These element have a lower cohesion according to the given strain weakening
 rule and thus strain localization is initiated from them.
 The selection of elements is randomly made within the region at a certain
 distance from the left and right boundaries (Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:example-problem"

\end_inset

a).
\end_layout

\begin_layout Subsection
Results
\end_layout

\begin_layout Standard
Continued extension builds up strain, and the seed elements start to yield
 first.
 Initiated at the seed elements, localization of plastic strain propagates
 in the direction normal to the applied velocities.
 Eventually, a long basin bounded by conjugate normal faults is created
 (Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:example-problem"

\end_inset

b).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename figures/example_plots.png
	scale 90

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:example-problem"

\end_inset

(a) The mesh for the example problem with the locations of the ``seed
\begin_inset Quotes srd
\end_inset

 elements.
 (b) Plastic strain mapped on the deformed mesh after 2
\begin_inset space ~
\end_inset

km extension (0.1 My elapsed).
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Complete Listing of the Input XML File
\end_layout

\begin_layout Standard
The problem described above can be reproduced using the input file 
\family typewriter
\size small
Snac/examples/Cookbook1/cookbook1.xml
\family default
\size default
.
 The full contents of this input file is listed below for reference.
\end_layout

\begin_layout LyX-Code

\size small
<?xml version="1.0"?>
\end_layout

\begin_layout LyX-Code

\size small
<!DOCTYPE StGermainData SYSTEM "stgermain.dtd">
\end_layout

\begin_layout LyX-Code

\size small
<!-- StGermain-Snac input file -->
\end_layout

\begin_layout LyX-Code

\size small
<StGermainData xmlns="http://www.vpac.org/StGermain/XML_IO_Handler/Jun2003">
 
\end_layout

\begin_layout LyX-Code

\size small
<!-- StGermain simulation parameters -->        
\end_layout

\begin_layout LyX-Code

\size small
<param name="start"> 0 </param>         
\end_layout

\begin_layout LyX-Code

\size small
<param name="outputPath">./data</param>      
\end_layout

\begin_layout LyX-Code

\size small
<param name="dumpEvery"> 1000 </param>  
\end_layout

\begin_layout LyX-Code

\size small
<param name="maxTimeSteps"> 100000 </param> 
\end_layout

\begin_layout LyX-Code

\size small
<!-- Snac variables -->         
\end_layout

\begin_layout LyX-Code

\size small
<param name="density"> 2700 </param>    
\end_layout

\begin_layout LyX-Code

\size small
<param name="gravity"> 9.8 </param>     
\end_layout

\begin_layout LyX-Code

\size small
<param name="demf"> 0.8 </param>        
\end_layout

\begin_layout LyX-Code

\size small
<param name="dtType"> constant </param>         
\end_layout

\begin_layout LyX-Code

\size small
<param name="timeStep"> 6.3072e+07 </param>     
\end_layout

\begin_layout LyX-Code

\size small
<param name="forceCalcType"> complete </param>  
\end_layout

\begin_layout LyX-Code

\size small
<param name="decomposedAxis"> 0 </param>
\end_layout

\begin_layout LyX-Code

\size small
<param name="storeForces"> no </param>  
\end_layout

\begin_layout LyX-Code

\size small
<param name="forceCheckSum"> no </param>        
\end_layout

\begin_layout LyX-Code

\size small
<param name="topo_kappa"> 0.0 </param>  
\end_layout

\begin_layout LyX-Code

\size small
<param name="alpha"> 0 </param> 
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\size small
<!-- Extension modules -->      
\end_layout

\begin_layout LyX-Code

\size small
<list name="extensions">                
\end_layout

\begin_layout LyX-Code

\size small
    <param> SnacTemperature </param>
\end_layout

\begin_layout LyX-Code

\size small
    <param> SnacViscoPlastic </param>
\end_layout

\begin_layout LyX-Code

\size small
    <param> SnacHydroStaticIC </param>
\end_layout

\begin_layout LyX-Code

\size small
    <param> SnacVPSeeds </param>
\end_layout

\begin_layout LyX-Code

\size small
    <param> SnacWinklerForce </param>
\end_layout

\begin_layout LyX-Code

\size small
</list>
\end_layout

\begin_layout LyX-Code

\size small
<struct name="mesh">            
\end_layout

\begin_layout LyX-Code

\size small
    <param name="shadowDepth"> 1 </param>               
\end_layout

\begin_layout LyX-Code

\size small
    <param name="decompDims"> 1 </param>
\end_layout

\begin_layout LyX-Code

\size small
    <!-- Mesh size -->              
\end_layout

\begin_layout LyX-Code

\size small
    <param name="meshSizeI"> 21 </param>            
\end_layout

\begin_layout LyX-Code

\size small
    <param name="meshSizeJ"> 6 </param>            
\end_layout

\begin_layout LyX-Code

\size small
    <param name="meshSizeK"> 41 </param>    
\end_layout

\begin_layout LyX-Code

\size small
    <!-- Initial geometry -->               
\end_layout

\begin_layout LyX-Code

\size small
    <param name="minX"> 0 </param>          
\end_layout

\begin_layout LyX-Code

\size small
    <param name="minY"> 0 </param>          
\end_layout

\begin_layout LyX-Code

\size small
    <param name="minZ"> 0 </param>          
\end_layout

\begin_layout LyX-Code

\size small
    <param name="maxX">  40000 </param>            
\end_layout

\begin_layout LyX-Code

\size small
    <param name="maxY">  10000 </param>             
\end_layout

\begin_layout LyX-Code

\size small
    <param name="maxZ">  80000 </param>
\end_layout

\begin_layout LyX-Code

\size small
    <!-- Remeshing -->              
\end_layout

\begin_layout LyX-Code

\size small
    <param name="meshType"> cartesian </param>              
\end_layout

\begin_layout LyX-Code

\size small
    <param name="buildNodeNeighbourTbl"> True </param>      
\end_layout

\begin_layout LyX-Code

\size small
</struct>
\end_layout

\begin_layout LyX-Code

\size small
<!-- Elastic material parameters -->    
\end_layout

\begin_layout LyX-Code

\size small
<param name="lambda"> 1.0e+10 </param>  
\end_layout

\begin_layout LyX-Code

\size small
<param name="mu"> 1.0e+10 </param>      
\end_layout

\begin_layout LyX-Code

\size small
<!-- Viscous material parameters -->    
\end_layout

\begin_layout LyX-Code

\size small
<param name="refvisc"> 1.0e+20 </param>         
\end_layout

\begin_layout LyX-Code

\size small
<param name="reftemp"> 1400.0 </param>  
\end_layout

\begin_layout LyX-Code

\size small
<param name="activationE"> 45.0e+03 </param>    
\end_layout

\begin_layout LyX-Code

\size small
<param name="vis_min"> 1.0e+30 </param>         
\end_layout

\begin_layout LyX-Code

\size small
<param name="vis_max"> 1.0e+30 </param>         
\end_layout

\begin_layout LyX-Code

\size small
<param name="srexponent"> 1 </param>    
\end_layout

\begin_layout LyX-Code

\size small
<!-- Plastic material parameters -->    
\end_layout

\begin_layout LyX-Code

\size small
<param name="yieldcriterion"> mohrcoulomb </param>      
\end_layout

\begin_layout LyX-Code

\size small
<param name="nsegments"> 2 </param>     
\end_layout

\begin_layout LyX-Code

\size small
<param name="plstrain0"> 0.0 </param>   
\end_layout

\begin_layout LyX-Code

\size small
<param name="plstrain1"> 0.02 </param>  
\end_layout

\begin_layout LyX-Code

\size small
<param name="plstrain2"> 1000.0 </param>        
\end_layout

\begin_layout LyX-Code

\size small
<param name="frictionAngle0"> 30.0 </param>     
\end_layout

\begin_layout LyX-Code

\size small
<param name="frictionAngle1"> 30.0 </param>     
\end_layout

\begin_layout LyX-Code

\size small
<param name="frictionAngle2"> 30.0 </param>     
\end_layout

\begin_layout LyX-Code

\size small
<param name="dilationAngle0"> 5.0 </param>      
\end_layout

\begin_layout LyX-Code

\size small
<param name="dilationAngle1"> 5.0 </param>      
\end_layout

\begin_layout LyX-Code

\size small
<param name="dilationAngle2"> 5.0 </param>      
\end_layout

\begin_layout LyX-Code

\size small
<param name="cohesion0"> 4.0e+07 </param>       
\end_layout

\begin_layout LyX-Code

\size small
<param name="cohesion1"> 4.0e+05 </param>       
\end_layout

\begin_layout LyX-Code

\size small
<param name="cohesion2"> 0.0e+00 </param>       
\end_layout

\begin_layout LyX-Code

\size small
<param name="ten_off"> 1.0e+13 </param>         
\end_layout

\begin_layout LyX-Code

\size small
<!-- Temperature variables -->  
\end_layout

\begin_layout LyX-Code

\size small
<param name="topTemp"> 0.0 </param>     
\end_layout

\begin_layout LyX-Code

\size small
<param name="bottomTemp"> 700.0 </param>        
\end_layout

\begin_layout LyX-Code

\size small
<param name="thermal_conduct"> 1.6 </param>     
\end_layout

\begin_layout LyX-Code

\size small
<param name="heatCapacity"> 1000.0 </param>     
\end_layout

\begin_layout LyX-Code

\size small
<!-- Remesher info -->  
\end_layout

\begin_layout LyX-Code

\size small
<!-- Used only when the SnacRemesher plugin is loaded.
 -->
\end_layout

\begin_layout LyX-Code

\size small
<!-- <param name="remeshCondition"> onBothTimeStepLength </param>
\end_layout

\begin_layout LyX-Code

\size small
     <param name="remeshCondition"> onTimeStep </param>
\end_layout

\begin_layout LyX-Code

\size small
     <param name="remeshCondition"> onMinLengthScale </param> -->     
\end_layout

\begin_layout LyX-Code

\size small
<param name="remeshCondition"> onMinLengthScale </param>        
\end_layout

\begin_layout LyX-Code

\size small
<param name="remeshTimeStepCriterion"> 15000 </param>   
\end_layout

\begin_layout LyX-Code

\size small
<param name="remeshLengthCriterion"> 0.7 </param>      
\end_layout

\begin_layout LyX-Code

\size small
<param name="bottomResotre"> on </param>
\end_layout

\begin_layout LyX-Code

\size small
<!-- node ICs -->       
\end_layout

\begin_layout LyX-Code

\size small
<struct name="nodeICs">                 
\end_layout

\begin_layout LyX-Code

\size small
    <list name="vcList">                    
\end_layout

\begin_layout LyX-Code

\size small
        <struct>                                
\end_layout

\begin_layout LyX-Code

\size small
            <param name="type"> AllNodesVC </param>                    
             
\end_layout

\begin_layout LyX-Code

\size small
            <list name="variables">                                    
     
\end_layout

\begin_layout LyX-Code

\size small
                <struct>                                               
 
\end_layout

\begin_layout LyX-Code

\size small
                    <param name="name"> vx </param>       
\end_layout

\begin_layout LyX-Code

\size small
                    <param name="type"> double </param>
\end_layout

\begin_layout LyX-Code

\size small
                    <param name="value"> 0 </param>
\end_layout

\begin_layout LyX-Code

\size small
                </struct>     
\end_layout

\begin_layout LyX-Code

\size small
                <struct>                                               
 
\end_layout

\begin_layout LyX-Code

\size small
                    <param name="name"> vy </param>       
\end_layout

\begin_layout LyX-Code

\size small
                    <param name="type"> double </param>
\end_layout

\begin_layout LyX-Code

\size small
                    <param name="value"> 0 </param>
\end_layout

\begin_layout LyX-Code

\size small
                </struct>     
\end_layout

\begin_layout LyX-Code

\size small
                <struct>                                               
 
\end_layout

\begin_layout LyX-Code

\size small
                    <param name="name"> vz </param>       
\end_layout

\begin_layout LyX-Code

\size small
                    <param name="type"> double </param>
\end_layout

\begin_layout LyX-Code

\size small
                    <param name="value"> 0 </param>
\end_layout

\begin_layout LyX-Code

\size small
                </struct>                              
\end_layout

\begin_layout LyX-Code

\size small
            </list>                         
\end_layout

\begin_layout LyX-Code

\size small
        </struct>                       
\end_layout

\begin_layout LyX-Code

\size small
        <struct>                                
\end_layout

\begin_layout LyX-Code

\size small
            <param name="type"> AllNodesVC </param>       
\end_layout

\begin_layout LyX-Code

\size small
            <list name="variables">
\end_layout

\begin_layout LyX-Code

\size small
                <struct>
\end_layout

\begin_layout LyX-Code

\size small
                    <param name="name"> temperature </param>
\end_layout

\begin_layout LyX-Code

\size small
                    <param name="type"> func </param>
\end_layout

\begin_layout LyX-Code

\size small
                    <param name="value">SnacTemperature_Top2BottomSweep</param>
\end_layout

\begin_layout LyX-Code

\size small
                </struct>
\end_layout

\begin_layout LyX-Code

\size small
            </list>
\end_layout

\begin_layout LyX-Code

\size small
        </struct>
\end_layout

\begin_layout LyX-Code

\size small
    </list>
\end_layout

\begin_layout LyX-Code

\size small
</struct>
\end_layout

\begin_layout LyX-Code

\size small
<!-- element ICs -->    
\end_layout

\begin_layout LyX-Code

\size small
<struct name="elementICs">              
\end_layout

\begin_layout LyX-Code

\size small
    <list name="vcList">                    
\end_layout

\begin_layout LyX-Code

\size small
        <struct>                                
\end_layout

\begin_layout LyX-Code

\size small
            <param name="type"> AllElementsVC </param>
\end_layout

\begin_layout LyX-Code

\size small
            <list name="variables">
\end_layout

\begin_layout LyX-Code

\size small
                <struct>
\end_layout

\begin_layout LyX-Code

\size small
                    <param name="name">elementMaterial</param>
\end_layout

\begin_layout LyX-Code

\size small
                    <param name="type"> int </param>
\end_layout

\begin_layout LyX-Code

\size small
                    <param name="value"> 0 </param>
\end_layout

\begin_layout LyX-Code

\size small
                </struct>
\end_layout

\begin_layout LyX-Code

\size small
            </list>
\end_layout

\begin_layout LyX-Code

\size small
        </struct>
\end_layout

\begin_layout LyX-Code

\size small
    </list>
\end_layout

\begin_layout LyX-Code

\size small
</struct> 
\end_layout

\begin_layout LyX-Code

\size small
<!-- Velocity BCs -->   
\end_layout

\begin_layout LyX-Code

\size small
<struct name="velocityBCs">             
\end_layout

\begin_layout LyX-Code

\size small
    <list name="vcList">
\end_layout

\begin_layout LyX-Code

\size small
        <struct>
\end_layout

\begin_layout LyX-Code

\size small
            <param name="type"> WallVC </param>
\end_layout

\begin_layout LyX-Code

\size small
            <param name="wall"> left </param>
\end_layout

\begin_layout LyX-Code

\size small
            <list name="variables">
\end_layout

\begin_layout LyX-Code

\size small
                <struct>
\end_layout

\begin_layout LyX-Code

\size small
                    <param name="name"> vx </param>
\end_layout

\begin_layout LyX-Code

\size small
                    <param name="type"> double </param>
\end_layout

\begin_layout LyX-Code

\size small
                    <param name="value"> -3.17e-10 </param>
\end_layout

\begin_layout LyX-Code

\size small
                </struct>
\end_layout

\begin_layout LyX-Code

\size small
            </list>
\end_layout

\begin_layout LyX-Code

\size small
        </struct>
\end_layout

\begin_layout LyX-Code

\size small
        <struct>
\end_layout

\begin_layout LyX-Code

\size small
            <param name="type"> WallVC </param>
\end_layout

\begin_layout LyX-Code

\size small
            <param name="wall"> right </param>
\end_layout

\begin_layout LyX-Code

\size small
            <list name="variables">
\end_layout

\begin_layout LyX-Code

\size small
                <struct>
\end_layout

\begin_layout LyX-Code

\size small
                    <param name="name"> vx </param>
\end_layout

\begin_layout LyX-Code

\size small
                    <param name="type"> double </param>
\end_layout

\begin_layout LyX-Code

\size small
                    <param name="value"> 3.17e-10 </param>
\end_layout

\begin_layout LyX-Code

\size small
                </struct>
\end_layout

\begin_layout LyX-Code

\size small
            </list>
\end_layout

\begin_layout LyX-Code

\size small
        </struct>
\end_layout

\begin_layout LyX-Code

\size small
        <struct>
\end_layout

\begin_layout LyX-Code

\size small
        <struct>
\end_layout

\begin_layout LyX-Code

\size small
            <param name="type"> WallVC </param>
\end_layout

\begin_layout LyX-Code

\size small
            <param name="wall"> back </param>
\end_layout

\begin_layout LyX-Code

\size small
            <list name="variables">
\end_layout

\begin_layout LyX-Code

\size small
                <struct>
\end_layout

\begin_layout LyX-Code

\size small
                    <param name="name"> vz </param>
\end_layout

\begin_layout LyX-Code

\size small
                    <param name="type"> double </param>
\end_layout

\begin_layout LyX-Code

\size small
                    <param name="value"> 0.0 </param>
\end_layout

\begin_layout LyX-Code

\size small
                </struct>
\end_layout

\begin_layout LyX-Code

\size small
            </list>
\end_layout

\begin_layout LyX-Code

\size small
        </struct>
\end_layout

\begin_layout LyX-Code

\size small
        <struct>
\end_layout

\begin_layout LyX-Code

\size small
        <struct>
\end_layout

\begin_layout LyX-Code

\size small
            <param name="type"> WallVC </param>
\end_layout

\begin_layout LyX-Code

\size small
            <param name="wall"> front </param>
\end_layout

\begin_layout LyX-Code

\size small
            <list name="variables">
\end_layout

\begin_layout LyX-Code

\size small
                <struct>
\end_layout

\begin_layout LyX-Code

\size small
                    <param name="name"> vz </param>
\end_layout

\begin_layout LyX-Code

\size small
                    <param name="type"> double </param>
\end_layout

\begin_layout LyX-Code

\size small
                    <param name="value"> 0.0 </param>
\end_layout

\begin_layout LyX-Code

\size small
                </struct>
\end_layout

\begin_layout LyX-Code

\size small
            </list>
\end_layout

\begin_layout LyX-Code

\size small
        </struct>
\end_layout

\begin_layout LyX-Code

\size small
        <struct>
\end_layout

\begin_layout LyX-Code

\size small
            <param name="type"> WallVC </param>
\end_layout

\begin_layout LyX-Code

\size small
            <param name="wall"> bottom </param>
\end_layout

\begin_layout LyX-Code

\size small
            <list name="variables">
\end_layout

\begin_layout LyX-Code

\size small
                <struct>
\end_layout

\begin_layout LyX-Code

\size small
                    <param name="name"> vy </param>
\end_layout

\begin_layout LyX-Code

\size small
                    <param name="type"> double </param>
\end_layout

\begin_layout LyX-Code

\size small
                    <param name="value"> 0.0 </param>
\end_layout

\begin_layout LyX-Code

\size small
                </struct>
\end_layout

\begin_layout LyX-Code

\size small
            </list>
\end_layout

\begin_layout LyX-Code

\size small
        </struct>
\end_layout

\begin_layout LyX-Code

\size small
    </list>
\end_layout

\begin_layout LyX-Code

\size small
</struct>       
\end_layout

\begin_layout LyX-Code

\size small
<!-- Temperature BCs -->        
\end_layout

\begin_layout LyX-Code

\size small
<struct name="temperatureBCs">          
\end_layout

\begin_layout LyX-Code

\size small
    <list name="vcList">                    
\end_layout

\begin_layout LyX-Code

\size small
        <struct>                                
\end_layout

\begin_layout LyX-Code

\size small
            <param name="type"> WallVC </param>                        
     
\end_layout

\begin_layout LyX-Code

\size small
            <param name="wall"> top </param>                           
     
\end_layout

\begin_layout LyX-Code

\size small
            <list name="variables">                                    
     
\end_layout

\begin_layout LyX-Code

\size small
                <struct>                                               
 
\end_layout

\begin_layout LyX-Code

\size small
                    <param name="name"> temperature </param>
\end_layout

\begin_layout LyX-Code

\size small
                    <param name="type"> double </param>       
\end_layout

\begin_layout LyX-Code

\size small
                    <param name="value"> 0.0 </param>  
\end_layout

\begin_layout LyX-Code

\size small
                </struct>                               
\end_layout

\begin_layout LyX-Code

\size small
            </list>                         
\end_layout

\begin_layout LyX-Code

\size small
        </struct>
\end_layout

\begin_layout LyX-Code

\size small
        <struct>                                
\end_layout

\begin_layout LyX-Code

\size small
            <param name="type"> WallVC </param>                        
     
\end_layout

\begin_layout LyX-Code

\size small
            <param name="wall"> bottom </param>                        
        
\end_layout

\begin_layout LyX-Code

\size small
            <list name="variables">                                    
     
\end_layout

\begin_layout LyX-Code

\size small
                <struct>                                               
 
\end_layout

\begin_layout LyX-Code

\size small
                    <param name="name"> temperature </param>
\end_layout

\begin_layout LyX-Code

\size small
                    <param name="type"> double </param>       
\end_layout

\begin_layout LyX-Code

\size small
                    <param name="value"> 700.0 </param>  
\end_layout

\begin_layout LyX-Code

\size small
                </struct>                               
\end_layout

\begin_layout LyX-Code

\size small
            </list>                         
\end_layout

\begin_layout LyX-Code

\size small
        </struct>
\end_layout

\begin_layout LyX-Code

\size small
    </list>                         
\end_layout

\begin_layout LyX-Code

\size small
</struct>               
\end_layout

\begin_layout LyX-Code

\size small
</StGermainData> 
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Section
Cookbook 2: Condition functions to assign multiple material types
\end_layout

\begin_layout Standard
This example shows how to introduce multiple material types and assign them
 spatially in a non-trivial fashion.
 The domain is 300
\begin_inset Formula $\times$
\end_inset

6
\begin_inset Formula $\times$
\end_inset

300 km and discretized into 50
\begin_inset Formula $\times$
\end_inset

1
\begin_inset Formula $\times$
\end_inset

50 elements.
 Three types of materials are all elasto-plastic and have the same material
 properties except cohesions.
 Each type has the initial value of 10, 100, and 1 MPa, respectively.
 We use a condition function called 
\family typewriter
SnacCF_DeadSea
\family default
 to assign these types to three different subdomains.
 The boundary conditions set up the plane strain condition in the y direction
 while an oblique (relative to the z-axis) spreading is applied on the left
 and right sides.
 The map of phase index is shown in Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Map-of-phase"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename figures/example2_plot.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Map-of-phase"

\end_inset

Phase index map of Cookbook 2 generated by the condition function 
\family typewriter
SnacCF_DeadSea
\family default
.
 Arrows indicate the velocity boundary conditions at the initial time step.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Complete listing of the input XML file
\end_layout

\begin_layout LyX-Code
<?xml version="1.0"?> 
\end_layout

\begin_layout LyX-Code
<!DOCTYPE StGermainData SYSTEM "stgermain.dtd"> 
\end_layout

\begin_layout LyX-Code
<!-- StGermain-Snac input file --> 
\end_layout

\begin_layout LyX-Code
<StGermainData xmlns="http://www.vpac.org/StGermain/XML_IO_Handler/Jun2003">
 
\end_layout

\begin_layout LyX-Code
<!-- StGermain simulation parameters -->
\end_layout

\begin_layout LyX-Code
<param name="start"> 0 </param>
\end_layout

\begin_layout LyX-Code
<param name="outputPath">./data</param> 
\end_layout

\begin_layout LyX-Code
<param name="dumpEvery"> 10 </param>
\end_layout

\begin_layout LyX-Code
<param name="checkpointEvery"> 0 </param>
\end_layout

\begin_layout LyX-Code
<param name="maxTimeSteps"> 2 </param> 
\end_layout

\begin_layout LyX-Code
<param name="restartTimestep"> 0 </param> 
\end_layout

\begin_layout LyX-Code
<!-- Snac variables -->
\end_layout

\begin_layout LyX-Code
<param name="gravity"> 0.0 </param> 
\end_layout

\begin_layout LyX-Code
<param name="demf"> 0.8 </param>
\end_layout

\begin_layout LyX-Code
<param name="dtType"> constant </param>
\end_layout

\begin_layout LyX-Code
<param name="timeStep"> 3.1536e+08 </param>
\end_layout

\begin_layout LyX-Code
<param name="forceCalcType"> complete </param>
\end_layout

\begin_layout LyX-Code
<param name="storeForces"> no </param>
\end_layout

\begin_layout LyX-Code
<param name="forceCheckSum"> no </param>
\end_layout

\begin_layout LyX-Code
<param name="topo_kappa"> 0.0 </param> 
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
<!-- Extension modules -->
\end_layout

\begin_layout LyX-Code
<!-- 		
\end_layout

\begin_layout LyX-Code
    <param> SnacWinklerG3Force </param> 
\end_layout

\begin_layout LyX-Code
    <param> SnacRemesher </param> 
\end_layout

\begin_layout LyX-Code
    <param> SnacHydroStaticIC </param> 
\end_layout

\begin_layout LyX-Code
    <param> SnacCustomCartesian </param> 
\end_layout

\begin_layout LyX-Code
    <param> SnacViscoPlastic </param>
\end_layout

\begin_layout LyX-Code
    <param> SnacVPSeeds </param>
\end_layout

\begin_layout LyX-Code
    <param> SnacPlSeeds </param> 	
\end_layout

\begin_layout LyX-Code
-->
\end_layout

\begin_layout LyX-Code
<list name="extensions">
\end_layout

\begin_layout LyX-Code
    <param> SnacPlastic </param>
\end_layout

\begin_layout LyX-Code
    <param> SnacCondFunc </param>
\end_layout

\begin_layout LyX-Code
</list> 
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
<struct name="mesh"> 		
\end_layout

\begin_layout LyX-Code
    <param name="shadowDepth"> 1 </param>
\end_layout

\begin_layout LyX-Code
    <param name="decompDims"> 2 </param>
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
    <!-- Mesh size -->
\end_layout

\begin_layout LyX-Code
    <param name="meshSizeI"> 51 </param>
\end_layout

\begin_layout LyX-Code
    <param name="meshSizeJ"> 2 </param>
\end_layout

\begin_layout LyX-Code
    <param name="meshSizeK"> 51 </param>
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
    <!-- Initial geometry -->
\end_layout

\begin_layout LyX-Code
    <param name="minX"> 0 </param>
\end_layout

\begin_layout LyX-Code
    <param name="minY"> -6000.0 </param>
\end_layout

\begin_layout LyX-Code
    <param name="minZ"> 0 </param>
\end_layout

\begin_layout LyX-Code
    <param name="maxX"> 300000.0 </param>
\end_layout

\begin_layout LyX-Code
    <param name="maxY"> 0.0 </param>
\end_layout

\begin_layout LyX-Code
    <param name="maxZ"> 300000.0 </param>
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
    <!-- Remeshing -->
\end_layout

\begin_layout LyX-Code
    <param name="meshType"> cartesian </param>
\end_layout

\begin_layout LyX-Code
    <param name="buildNodeNeighbourTbl"> True </param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
<list name="materials"> 	<!-- Three types of material with different cohesions--
>
\end_layout

\begin_layout LyX-Code
<struct name="mat_normal">
\end_layout

\begin_layout LyX-Code
    <param name="density"> 2800 </param>
\end_layout

\begin_layout LyX-Code
    <param name="alpha"> 0.0 </param>
\end_layout

\begin_layout LyX-Code
    <param name="beta"> 0.0 </param> 		
\end_layout

\begin_layout LyX-Code
    <!-- Elastic material parameters -->
\end_layout

\begin_layout LyX-Code
    <param name="lambda"> 3.0e+10 </param>
\end_layout

\begin_layout LyX-Code
    <param name="mu"> 3.0e+10 </param>
\end_layout

\begin_layout LyX-Code
    <!-- Plastic material parameters -->
\end_layout

\begin_layout LyX-Code
    <param name="yieldcriterion"> mohrcoulomb </param>
\end_layout

\begin_layout LyX-Code
    <param name="nsegments"> 2 </param>
\end_layout

\begin_layout LyX-Code
    <param name="plstrain0"> 0.0 </param>
\end_layout

\begin_layout LyX-Code
    <param name="plstrain1"> 0.01 </param>
\end_layout

\begin_layout LyX-Code
    <param name="plstrain2"> 1000.0 </param>
\end_layout

\begin_layout LyX-Code
    <param name="frictionAngle0"> 0.0 </param>
\end_layout

\begin_layout LyX-Code
    <param name="frictionAngle1"> 0.0 </param>
\end_layout

\begin_layout LyX-Code
    <param name="frictionAngle2"> 0.0 </param>
\end_layout

\begin_layout LyX-Code
    <param name="dilationAngle0"> 0.0 </param>
\end_layout

\begin_layout LyX-Code
    <param name="dilationAngle1"> 0.0 </param>
\end_layout

\begin_layout LyX-Code
    <param name="dilationAngle2"> 0.0 </param>
\end_layout

\begin_layout LyX-Code
    <param name="cohesion0"> 2.0e+07 </param>
\end_layout

\begin_layout LyX-Code
    <param name="cohesion1"> 1.0e+07 </param>
\end_layout

\begin_layout LyX-Code
    <param name="cohesion2"> 1.0e+07 </param>
\end_layout

\begin_layout LyX-Code
    <param name="ten_off"> 1.0e+12 </param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="mat_strong">
\end_layout

\begin_layout LyX-Code
    <param name="density"> 2800 </param>
\end_layout

\begin_layout LyX-Code
    <param name="alpha"> 0.0 </param>
\end_layout

\begin_layout LyX-Code
    <param name="beta"> 0.0 </param>
\end_layout

\begin_layout LyX-Code
    <!-- Elastic material parameters -->
\end_layout

\begin_layout LyX-Code
    <param name="lambda"> 3.0e+10 </param>
\end_layout

\begin_layout LyX-Code
    <param name="mu"> 3.0e+10 </param>
\end_layout

\begin_layout LyX-Code
    <!-- Plastic material parameters -->
\end_layout

\begin_layout LyX-Code
    <param name="yieldcriterion"> mohrcoulomb </param>
\end_layout

\begin_layout LyX-Code
    <param name="nsegments"> 2 </param>
\end_layout

\begin_layout LyX-Code
    <param name="plstrain0"> 0.0 </param>
\end_layout

\begin_layout LyX-Code
    <param name="plstrain1"> 0.01 </param>
\end_layout

\begin_layout LyX-Code
    <param name="plstrain2"> 1000.0 </param>
\end_layout

\begin_layout LyX-Code
    <param name="frictionAngle0"> 0.0 </param>
\end_layout

\begin_layout LyX-Code
    <param name="frictionAngle1"> 0.0 </param>
\end_layout

\begin_layout LyX-Code
    <param name="frictionAngle2"> 0.0 </param>
\end_layout

\begin_layout LyX-Code
    <param name="dilationAngle0"> 0.0 </param>
\end_layout

\begin_layout LyX-Code
    <param name="dilationAngle1"> 0.0 </param>
\end_layout

\begin_layout LyX-Code
    <param name="dilationAngle2"> 0.0 </param>
\end_layout

\begin_layout LyX-Code
    <param name="cohesion0"> 2.0e+08 </param>
\end_layout

\begin_layout LyX-Code
    <param name="cohesion1"> 1.0e+08 </param>
\end_layout

\begin_layout LyX-Code
    <param name="cohesion2"> 1.0e+08 </param>
\end_layout

\begin_layout LyX-Code
    <param name="ten_off"> 1.0e+12 </param>
\end_layout

\begin_layout LyX-Code
</struct> 	
\end_layout

\begin_layout LyX-Code
<struct name="mat_weak">
\end_layout

\begin_layout LyX-Code
    <param name="density"> 2800 </param>
\end_layout

\begin_layout LyX-Code
    <param name="alpha"> 0.0 </param>
\end_layout

\begin_layout LyX-Code
    <param name="beta"> 0.0 </param>
\end_layout

\begin_layout LyX-Code
    <!-- Elastic material parameters -->
\end_layout

\begin_layout LyX-Code
    <param name="lambda"> 3.0e+10 </param>
\end_layout

\begin_layout LyX-Code
    <param name="mu"> 3.0e+10 </param>
\end_layout

\begin_layout LyX-Code
    <!-- Plastic material parameters -->
\end_layout

\begin_layout LyX-Code
    <param name="yieldcriterion"> mohrcoulomb </param>
\end_layout

\begin_layout LyX-Code
    <param name="nsegments"> 2 </param>
\end_layout

\begin_layout LyX-Code
    <param name="plstrain0"> 0.0 </param>
\end_layout

\begin_layout LyX-Code
    <param name="plstrain1"> 0.01 </param>
\end_layout

\begin_layout LyX-Code
    <param name="plstrain2"> 1000.0 </param>
\end_layout

\begin_layout LyX-Code
    <param name="frictionAngle0"> 0.0 </param>
\end_layout

\begin_layout LyX-Code
    <param name="frictionAngle1"> 0.0 </param>
\end_layout

\begin_layout LyX-Code
    <param name="frictionAngle2"> 0.0 </param>
\end_layout

\begin_layout LyX-Code
    <param name="dilationAngle0"> 0.0 </param>
\end_layout

\begin_layout LyX-Code
    <param name="dilationAngle1"> 0.0 </param>
\end_layout

\begin_layout LyX-Code
    <param name="dilationAngle2"> 0.0 </param>
\end_layout

\begin_layout LyX-Code
    <param name="cohesion0"> 2.0e+06 </param>
\end_layout

\begin_layout LyX-Code
    <param name="cohesion1"> 1.0e+06 </param>
\end_layout

\begin_layout LyX-Code
    <param name="cohesion2"> 1.0e+06 </param>
\end_layout

\begin_layout LyX-Code
    <param name="ten_off"> 1.0e+12 </param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
</list>
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
<!-- Remesher info -->
\end_layout

\begin_layout LyX-Code
<!-- 
\end_layout

\begin_layout LyX-Code
    <param name="remeshCondition"> onBothTimeStepLength </param>
\end_layout

\begin_layout LyX-Code
    <param name="remeshCondition"> onTimeStep </param>
\end_layout

\begin_layout LyX-Code
    <param name="remeshCondition"> onMinLengthScale </param>
\end_layout

\begin_layout LyX-Code
--> 	
\end_layout

\begin_layout LyX-Code
<param name="remeshCondition"> onMinLengthScale </param>
\end_layout

\begin_layout LyX-Code
<param name="remeshTimeStepCriterion"> 15000 </param>
\end_layout

\begin_layout LyX-Code
<param name="remeshLengthCriterion"> 45.0 </param>
\end_layout

\begin_layout LyX-Code
<param name="bottomResotre"> on </param> 
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
<!-- node ICs -->
\end_layout

\begin_layout LyX-Code
<struct name="nodeICs">
\end_layout

\begin_layout LyX-Code
    <list name="vcList">
\end_layout

\begin_layout LyX-Code
        <struct>
\end_layout

\begin_layout LyX-Code
            <param name="type"> AllNodesVC </param>
\end_layout

\begin_layout LyX-Code
            <list name="variables">
\end_layout

\begin_layout LyX-Code
            <struct>
\end_layout

\begin_layout LyX-Code
                <param name="name"> vx </param>
\end_layout

\begin_layout LyX-Code
                <param name="type"> double </param>
\end_layout

\begin_layout LyX-Code
                <param name="value"> 0 </param>
\end_layout

\begin_layout LyX-Code
            </struct>
\end_layout

\begin_layout LyX-Code
            <struct>
\end_layout

\begin_layout LyX-Code
                <param name="name"> vy </param>
\end_layout

\begin_layout LyX-Code
                <param name="type"> double </param>
\end_layout

\begin_layout LyX-Code
                <param name="value"> 0 </param>
\end_layout

\begin_layout LyX-Code
            </struct>
\end_layout

\begin_layout LyX-Code
            <struct>
\end_layout

\begin_layout LyX-Code
                <param name="name"> vz </param>
\end_layout

\begin_layout LyX-Code
                <param name="type"> double </param>
\end_layout

\begin_layout LyX-Code
                <param name="value"> 0 </param>
\end_layout

\begin_layout LyX-Code
            </struct> 				
\end_layout

\begin_layout LyX-Code
            </list> 			
\end_layout

\begin_layout LyX-Code
        </struct> 		
\end_layout

\begin_layout LyX-Code
    </list> 	
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<!-- element ICs -->
\end_layout

\begin_layout LyX-Code
<struct name="elementICs">
\end_layout

\begin_layout LyX-Code
    <list name="vcList">
\end_layout

\begin_layout LyX-Code
        <struct> 				
\end_layout

\begin_layout LyX-Code
            <param name="type"> AllElementsVC </param>
\end_layout

\begin_layout LyX-Code
            <list name="variables">
\end_layout

\begin_layout LyX-Code
                <struct>
\end_layout

\begin_layout LyX-Code
                    <param name="name"> elementMaterial </param>
\end_layout

\begin_layout LyX-Code
                    <param name="type"> func </param>
\end_layout

\begin_layout LyX-Code
                    <param name="value"> SnacCF_DeadSea </param>
\end_layout

\begin_layout LyX-Code
                </struct>
\end_layout

\begin_layout LyX-Code
            </list>
\end_layout

\begin_layout LyX-Code
        </struct>
\end_layout

\begin_layout LyX-Code
    </list>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
<!-- Velocity BCs -->
\end_layout

\begin_layout LyX-Code
<struct name="velocityBCs">
\end_layout

\begin_layout LyX-Code
    <list name="vcList">
\end_layout

\begin_layout LyX-Code
        <struct>
\end_layout

\begin_layout LyX-Code
            <param name="type"> WallVC </param>
\end_layout

\begin_layout LyX-Code
            <param name="wall"> left </param>
\end_layout

\begin_layout LyX-Code
            <list name="variables">
\end_layout

\begin_layout LyX-Code
            <struct>
\end_layout

\begin_layout LyX-Code
                <param name="name"> vx </param>
\end_layout

\begin_layout LyX-Code
                <param name="type"> double </param>
\end_layout

\begin_layout LyX-Code
                <param name="value"> -1.5e-10 </param>
\end_layout

\begin_layout LyX-Code
            </struct>
\end_layout

\begin_layout LyX-Code
            <struct>
\end_layout

\begin_layout LyX-Code
                <param name="name"> vz </param>
\end_layout

\begin_layout LyX-Code
                <param name="type"> double </param>
\end_layout

\begin_layout LyX-Code
                <param name="value"> 1.5e-10 </param>
\end_layout

\begin_layout LyX-Code
            </struct>
\end_layout

\begin_layout LyX-Code
            </list>
\end_layout

\begin_layout LyX-Code
        </struct>
\end_layout

\begin_layout LyX-Code
        <struct>
\end_layout

\begin_layout LyX-Code
            <param name="type"> WallVC </param>
\end_layout

\begin_layout LyX-Code
            <param name="wall"> right </param>
\end_layout

\begin_layout LyX-Code
            <list name="variables">
\end_layout

\begin_layout LyX-Code
            <struct>
\end_layout

\begin_layout LyX-Code
                <param name="name"> vx </param>
\end_layout

\begin_layout LyX-Code
                <param name="type"> double </param>
\end_layout

\begin_layout LyX-Code
                <param name="value"> 1.5e-10 </param>
\end_layout

\begin_layout LyX-Code
            </struct>
\end_layout

\begin_layout LyX-Code
            <struct>
\end_layout

\begin_layout LyX-Code
                <param name="name"> vz </param>
\end_layout

\begin_layout LyX-Code
                <param name="type"> double </param>
\end_layout

\begin_layout LyX-Code
                <param name="value"> -1.5e-10 </param>
\end_layout

\begin_layout LyX-Code
            </struct>
\end_layout

\begin_layout LyX-Code
            </list>
\end_layout

\begin_layout LyX-Code
        </struct>
\end_layout

\begin_layout LyX-Code
        <struct>
\end_layout

\begin_layout LyX-Code
            <param name="type"> WallVC </param>
\end_layout

\begin_layout LyX-Code
            <param name="wall"> bottom </param>
\end_layout

\begin_layout LyX-Code
            <list name="variables">
\end_layout

\begin_layout LyX-Code
            <struct>
\end_layout

\begin_layout LyX-Code
                <param name="name"> vy </param>
\end_layout

\begin_layout LyX-Code
                <param name="type"> double </param>
\end_layout

\begin_layout LyX-Code
                <param name="value"> 0 </param>
\end_layout

\begin_layout LyX-Code
            </struct>
\end_layout

\begin_layout LyX-Code
            </list>
\end_layout

\begin_layout LyX-Code
        </struct>
\end_layout

\begin_layout LyX-Code
        <struct>
\end_layout

\begin_layout LyX-Code
            <param name="type"> WallVC </param>
\end_layout

\begin_layout LyX-Code
            <param name="wall"> top </param>
\end_layout

\begin_layout LyX-Code
            <list name="variables">
\end_layout

\begin_layout LyX-Code
            <struct>
\end_layout

\begin_layout LyX-Code
                <param name="name"> vy </param>
\end_layout

\begin_layout LyX-Code
                <param name="type"> double </param>
\end_layout

\begin_layout LyX-Code
                <param name="value"> 0 </param>
\end_layout

\begin_layout LyX-Code
            </struct>
\end_layout

\begin_layout LyX-Code
            </list>
\end_layout

\begin_layout LyX-Code
        </struct>
\end_layout

\begin_layout LyX-Code
    </list>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
</StGermainData>
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "cha:parallel performance"

\end_inset

Parallel Performance
\end_layout

\begin_layout Section
Method
\end_layout

\begin_layout Standard
We solve the problem of a 3D elastic bar with a given initial geometry deforming
 by its own weight to acquire SNAC's hard scaling data (i.e., the size of
 problem is fixed while the number of processors is varied).
 All the boundaries except the top surface is fixed such that the top surface
 is warped downward due to gravity.
 The file I/O has been reduced to a minimal level.
 The 
\begin_inset Formula $32^{3}$
\end_inset

-element case problem was run until the 1000th step.
 To save time, however, the 
\begin_inset Formula $64^{3}$
\end_inset

-element and 
\begin_inset Formula $128^{3}$
\end_inset

-element cases were run until 200th and 50Æth step, respectively.
 
\end_layout

\begin_layout Standard
These tests were performed on 
\family typewriter
ranger
\family default
 at Texas Advanced Computing Center of University of Texas, Austin, by Dr.
 Colin Stark at Lamont Doherty Earth Observatory of Columbia University.
\end_layout

\begin_layout Section
Results
\end_layout

\begin_layout Standard
The total wall clock times taken for each case is shown in the left panel
 of Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:parallel performance"

\end_inset

 as a function of the number of cores.
 The plots of speedup and efficiency (the middle and right panels of Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:parallel performance"

\end_inset

) show the acceptable performance of SNAC up to 4096 cores.
 The performance of the 
\begin_inset Formula $32^{3}$
\end_inset

-element case becomes notably poor for 2048 cores or more.
 This is because the size of subdomain becomes too small to benefit from
 parallel processing.
 These results suggest that the parallel overhead will dominate the computation
 time if the subdomains become too small and the empirical lower limit for
 the subdomain size is 
\begin_inset Formula $3^{3}$
\end_inset

 elements.
 Also, a good scaling is expected to hold for even larger numbers of cores
 if the problem size is sufficiently large.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename figures/scaling_walltime1.pdf
	scale 30

\end_inset


\begin_inset Graphics
	filename figures/scaling_speedup1.pdf
	scale 30

\end_inset


\begin_inset Graphics
	filename figures/scaling_efficiency1.pdf
	scale 30

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
(left) Wall clock time as a function of the number of cores.
 Speedup (middle) and efficiency (right) up to 4096 cores.
\begin_inset CommandInset label
LatexCommand label
name "fig:parallel performance"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "cha:Benchmark-Problems"

\end_inset

Benchmark Problems
\end_layout

\begin_layout Section
Odometer Test
\end_layout

\begin_layout Standard
This problem concerns the determination of stresses in a Mohr-Coulomb material
 subjected to an odometer test.
 In this experiment, two of the principal stress components are equal and,
 during plastic flow, the stress point evolves along a vertex of the Mohr-Coulom
b criterion representation in the principal stress space.
 
\end_layout

\begin_layout Subsection
Model Setup 
\end_layout

\begin_layout Itemize
Bulk modulus = 200 MPa
\end_layout

\begin_layout Itemize
Shear modulus = 200 MPa 
\end_layout

\begin_layout Itemize
Cohesion = 1 MPa 
\end_layout

\begin_layout Itemize
Friction angle = 10
\begin_inset Formula $^{\circ}$
\end_inset


\end_layout

\begin_layout Itemize
Dilation angle = 10
\begin_inset Formula $^{\circ}$
\end_inset


\end_layout

\begin_layout Itemize
Tension cut-off = 5.67 MPa 
\end_layout

\begin_layout Itemize
Boundary Conditions: 
\begin_inset Formula $V_{y}$
\end_inset

 = 
\begin_inset Formula $-10^{-5}$
\end_inset

 m/sec on the top surface.
 All the other surfaces are confined to their normal directions.
\end_layout

\begin_layout Itemize
dt = 1 sec 
\end_layout

\begin_layout Itemize
Mesh size: 1 m 
\begin_inset Formula $\times$
\end_inset

 1 m 
\begin_inset Formula $\times$
\end_inset

 1 m, and 5 
\begin_inset Formula $\times$
\end_inset

 5 
\begin_inset Formula $\times$
\end_inset

 5 nodes.
\end_layout

\begin_layout Itemize
\begin_inset Formula $\sigma_{yy}$
\end_inset

 component of stress and 
\begin_inset Formula $\epsilon_{yy}$
\end_inset

 component of strain are monitored.
 These values were averaged over the top elements layer.
 
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename figures/mesh-with-vbc.png
	lyxscale 60
	scale 75

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Mesh plotted with velocity boundary conditions
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Results 
\end_layout

\begin_layout Itemize
Stress-strain diagram is made using 
\begin_inset Formula $\sigma_{yy}$
\end_inset

 and 
\begin_inset Formula $\epsilon_{yy}$
\end_inset

 from both numerical and analytic solutions.
 
\end_layout

\begin_layout Itemize
Relative error is about 0.8%.
 
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename figures/snac-stress-chart.png
	lyxscale 40
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Stress-strain plot
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Thick Cylinder with Pressure on the Inner Wall I
\end_layout

\begin_layout Standard
A constant and uniform internal pressure is applied to the inner surface
 of a thick cylinder without pre-stress.
 Taking advantage of symmetry, only a quadrant of the cylinder is modeled.
 The outer surface has zero confining pressure.
 Tresca yield criterion is used (i.e., internal friction is ignored and only
 cohesion matters).
\end_layout

\begin_layout Subsection
Model Setup
\end_layout

\begin_layout Itemize
Bulk modulus = 200 MPa 
\end_layout

\begin_layout Itemize
Shear modulus = 200 MPa 
\end_layout

\begin_layout Itemize
Cohesion = 1 MPa 
\end_layout

\begin_layout Itemize
Friction angle = 0
\begin_inset Formula $^{\circ}$
\end_inset


\end_layout

\begin_layout Itemize
Dilation angle = 0
\begin_inset Formula $^{\circ}$
\end_inset


\end_layout

\begin_layout Itemize
Tension cut-off = 567 MPa 
\end_layout

\begin_layout Itemize
Geometry of cylinder: a (inner radius) = 3.0 m, b (outer radius) = 10.0 m.
 
\end_layout

\begin_layout Itemize
Boundary Conditions: P = 20 MPa at r = a, and P = 0.0 at r = b.
 Top and bottom: 
\begin_inset Formula $V_{y}$
\end_inset

=0.0, free-slip.
 
\end_layout

\begin_layout Itemize
dt = 1 sec and results after 5000 steps were used for comparison to the
 analytic solutions.
 
\end_layout

\begin_layout Itemize
Mesh size: 31 
\begin_inset Formula $\times$
\end_inset

 3 
\begin_inset Formula $\times$
\end_inset

 31 nodes.
\end_layout

\begin_layout Itemize
The second invariant of stress in xz plane are monitored.
 
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename figures/mesh-with-pbc.png
	lyxscale 40
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Mesh plotted with pressure boundary conditions
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Results
\end_layout

\begin_layout Itemize
Relative error is about 0.8%.
 
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename figures/2nd-invariant-stress-field.png
	lyxscale 40
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Second invariant of stress field 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename figures/2nd-invariant-profile-chart.png
	lyxscale 40
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Profile of the second invariant of stress along radial direction
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Thick Cylinder with Pressure on the Inner Wall II
\end_layout

\begin_layout Standard
The same problem with the previous section, but the Mohr-Coulomb yield criterion
 is adopted here.
\end_layout

\begin_layout Subsection
Model Setup 
\end_layout

\begin_layout Itemize
Bulk modulus = 200 MPa 
\end_layout

\begin_layout Itemize
Shear modulus = 200 MPa 
\end_layout

\begin_layout Itemize
Cohesion = 1 MPa 
\end_layout

\begin_layout Itemize
Friction angle = 10
\begin_inset Formula $^{\circ}$
\end_inset


\end_layout

\begin_layout Itemize
Dilation angle = 10
\begin_inset Formula $^{\circ}$
\end_inset


\end_layout

\begin_layout Itemize
Tension cut-off = 567 MPa 
\end_layout

\begin_layout Itemize
Geometry of cylinder: a (inner radius) = 3.0 m, b (outer radius) = 10.0 m.
 
\end_layout

\begin_layout Itemize
Boundary Conditions: P = 2 MPa at r = a, and P = 0.0 at r = b.
 Top and bottom: 
\begin_inset Formula $V_{y}$
\end_inset

= 0.0, free-slip.
 
\end_layout

\begin_layout Itemize
dt = 1 sec and results after 5000 steps were used for comparison to the
 analytic solutions.
 
\end_layout

\begin_layout Itemize
Mesh size: 31 
\begin_inset Formula $\times$
\end_inset

 3 
\begin_inset Formula $\times$
\end_inset

 31 nodes.
\end_layout

\begin_layout Itemize
The second invariant of stress in xz plane are monitored.
 
\end_layout

\begin_layout Subsection
Results 
\end_layout

\begin_layout Itemize
Relative error is about 0.1%.
 
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename figures/2nd-inv-profile-radial-direc-chart.png
	lyxscale 40
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Profile of the second invariant of stress along radial direction.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="3">
<features>
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Resolution
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Mohr-Coulomb
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Elastic
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
31
\begin_inset space ~
\end_inset


\begin_inset Formula $\times$
\end_inset


\begin_inset space ~
\end_inset

3
\begin_inset space ~
\end_inset


\begin_inset Formula $\times$
\end_inset


\begin_inset space ~
\end_inset

31
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.14%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.31%
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
25
\begin_inset space ~
\end_inset


\begin_inset Formula $\times$
\end_inset


\begin_inset space ~
\end_inset

3
\begin_inset space ~
\end_inset


\begin_inset Formula $\times$
\end_inset


\begin_inset space ~
\end_inset

25
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.74%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.39%
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
21
\begin_inset space ~
\end_inset


\begin_inset Formula $\times$
\end_inset


\begin_inset space ~
\end_inset

3
\begin_inset space ~
\end_inset


\begin_inset Formula $\times$
\end_inset


\begin_inset space ~
\end_inset

21
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.05%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.52%
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
17
\begin_inset space ~
\end_inset


\begin_inset Formula $\times$
\end_inset


\begin_inset space ~
\end_inset

3
\begin_inset space ~
\end_inset


\begin_inset Formula $\times$
\end_inset


\begin_inset space ~
\end_inset

17
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.08%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.56%
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
13
\begin_inset space ~
\end_inset


\begin_inset Formula $\times$
\end_inset


\begin_inset space ~
\end_inset

3
\begin_inset space ~
\end_inset


\begin_inset Formula $\times$
\end_inset


\begin_inset space ~
\end_inset

13
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.88%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.59%
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\begin_inset space ~
\end_inset


\begin_inset Formula $\times$
\end_inset


\begin_inset space ~
\end_inset

3
\begin_inset space ~
\end_inset


\begin_inset Formula $\times$
\end_inset


\begin_inset space ~
\end_inset

9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.12%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.54%
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Relative errors for Thick Cylinder Benchmark Problem II.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Parallel-Plate Viscometer Problem
\end_layout

\begin_layout Standard
A parallel-plate viscometer problem is simulated, in which viscoelastic
 material is squeezed between two parallel plates.
 The plates are moving at a constant velocity, 
\begin_inset Formula $v_{0}$
\end_inset

.
 Each plate has the length of 2L and is at a distance 2h from the other.
 No slip is assumed between the material and the plates.
 The approximate analytical solution is given by Jaeger 
\begin_inset CommandInset citation
LatexCommand cite
key "Jaeger_1969"

\end_inset

.
\end_layout

\begin_layout Subsection
Model Setup
\end_layout

\begin_layout Itemize
Model Setup 
\end_layout

\begin_layout Itemize
L = 10 m 
\end_layout

\begin_layout Itemize
h = 5 m 
\end_layout

\begin_layout Itemize
Viscosity = 
\begin_inset Formula $10^{9}$
\end_inset

 Pa.sec 
\end_layout

\begin_layout Itemize
Bulk modulus = 1.5 GPa 
\end_layout

\begin_layout Itemize
Shear modulus = 500 MPa 
\end_layout

\begin_layout Itemize
V0 = 
\begin_inset Formula $10^{-4}$
\end_inset

 m/sec 
\end_layout

\begin_layout Itemize
dt = 1 sec (results compared after 500 time steps.)
\end_layout

\begin_layout Itemize
Mesh size: 20 m 
\begin_inset Formula $\times$
\end_inset

 10 m 
\begin_inset Formula $\times$
\end_inset

 3 m, each element is a 1-m cube.
 
\end_layout

\begin_layout Itemize
Due to the assumption of the original problem setup, artificial forces should
 be added to left and right surfaces.
 
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename figures/results-BM-prob-1-graph.png
	lyxscale 60
	scale 75

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
The initial mesh (blue) with the velocity boundary condition (red arrows).
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Results 
\end_layout

\begin_layout Standard
Color field represents stress.
 Colored arrows are for SNAC's velocity, black arrows for the analytic solution.
 Over the most part of the domain, the two sets of arrows show good agreement.
 
\end_layout

\begin_layout Standard
The relative error of velocity solution is ~5%.
 This might be acceptable because the analytic solution is only approximate
 and for viscous fluid.
 Therefore, refining the mesh does not help reduce the error.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename figures/results-color-BM-prob-1-graph.png
	lyxscale 45
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
The second invariant of stress and velocities plotted on the deformed mesh.
 Colored arrows are for SNAC's solution, black ones for the analytic solution.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "cha:License"

\end_inset

License 
\end_layout

\begin_layout Standard

\series bold
GNU GENERAL PUBLIC LICENSE Version 2, June 1991.
 Copyright (C) 1989, 1991 Free Software Foundation, Inc.
 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
\series default
 
\begin_inset Newline newline
\end_inset


\series medium
Everyone is permitted to copy and distribute verbatim copies of this license
 document, but changing it is not allowed.
\end_layout

\begin_layout Section*
Preamble
\end_layout

\begin_layout Standard
The licenses for most software are designed to take away your freedom to
 share and change it.
 By contrast, the GNU General Public License is intended to guarantee your
 freedom to share and change free software -- to make sure the software
 is free for all its users.
 This General Public License applies to most of the Free Software Foundation's
 software and to any other program whose authors commit to using it.
 (Some other Free Software Foundation software is covered by the GNU Library
 General Public License instead.) You can apply it to your programs, too.
\end_layout

\begin_layout Standard
When we speak of free software, we are referring to freedom, not price.
 Our General Public Licenses are designed to make sure that you have the
 freedom to distribute copies of free software (and charge for this service
 if you wish), that you receive source code or can get it if you want it,
 that you can change the software or use pieces of it in new free programs;
 and that you know you can do these things.
\end_layout

\begin_layout Standard
To protect your rights, we need to make restrictions that forbid anyone
 to deny you these rights or to ask you to surrender the rights.
 These restrictions translate to certain responsibilities for you if you
 distribute copies of the software, or if you modify it.
\end_layout

\begin_layout Standard
For example, if you distribute copies of such a program, whether gratis
 or for a fee, you must give the recipients all the rights that you have.
 You must make sure that they, too, receive or can get the source code.
 And you must show them these terms so they know their rights.
\end_layout

\begin_layout Standard
We protect your rights with two steps:
\end_layout

\begin_layout Enumerate
Copyright the software, and 
\end_layout

\begin_layout Enumerate
Offer you this license which gives you legal permission to copy, distribute
 and/or modify the software.
\end_layout

\begin_layout Standard
Also, for each author's protection and ours, we want to make certain that
 everyone understands that there is no warranty for this free software.
 If the software is modified by someone else and passed on, we want its
 recipients to know that what they have is not the original, so that any
 problems introduced by others will not reflect on the original authors'
 reputations.
\end_layout

\begin_layout Standard
Finally, any free program is threatened constantly by software patents.
 We wish to avoid the danger that redistributors of a free program will
 individually obtain patent licenses, in effect making the program proprietary.
 To prevent this, we have made it clear that any patent must be licensed
 for everyone's free use or not licensed at all.
 
\end_layout

\begin_layout Standard
The precise terms and conditions for copying, distribution and modification
 follow.
\end_layout

\begin_layout Section*
GNU GENERAL PUBLIC LICENSE TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION
 AND MODIFICATION 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
item[0.]
\end_layout

\end_inset

This License applies to any program or other work which contains a notice
 placed by the copyright holder saying it may be distributed under the terms
 of this General Public License.
 The ``Program'' below refers to any such program or work, and a ``work
 based on the Program'' means either the Program or any derivative work
 under copyright law: that is to say, a work containing the Program or a
 portion of it, either verbatim or with modifications and/or translated
 into another language.
 (Hereinafter, translation is included without limitation in the term ``modifica
tion.'') Each licensee is addressed as ``you.''
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

Activities other than copying, distribution and modification are not covered
 by this License; they are outside its scope.
 The act of running the Program is not restricted, and the output from the
 Program is covered only if its contents constitute a work based on the
 Program (independent of having been made by running the Program).
 Whether that is true depends on what the Program does.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
You may copy and distribute verbatim copies of the Program's source code
 as you receive it, in any medium, provided that you conspicuously and appropria
tely publish on each copy an appropriate copyright notice and disclaimer
 of warranty; keep intact all the notices that refer to this License and
 to the absence of any warranty; and give any other recipients of the Program
 a copy of this License along with the Program.
 
\end_layout

\begin_deeper
\begin_layout Standard
You may charge a fee for the physical act of transferring a copy, and you
 may at your option offer warranty protection in exchange for a fee.
 
\end_layout

\end_deeper
\begin_layout Enumerate
You may modify your copy or copies of the Program or any portion of it,
 thus forming a work based on the Program, and copy and distribute such
 modifications or work under the terms of Section 1 above, provided that
 you also meet all of these conditions: 
\end_layout

\begin_deeper
\begin_layout Enumerate
You must cause the modified files to carry prominent notices stating that
 you changed the files and the date of any change.
 
\end_layout

\begin_layout Enumerate
You must cause any work that you distribute or publish, that in whole or
 in part contains or is derived from the Program or any part thereof, to
 be licensed as a whole at no charge to all third parties under the terms
 of this License.
 
\end_layout

\begin_layout Enumerate
If the modified program normally reads commands interactively when run,
 you must cause it, when started running for such interactive use in the
 most ordinary way, to print or display an announcement including an appropriate
 copyright notice and a notice that there is no warranty (or else, saying
 that you provide a warranty) and that users may redistribute the program
 under these conditions, and telling the user how to view a copy of this
 License.
 (Exception: if the Program itself is interactive but does not normally
 print such an announcement, your work based on the Program is not required
 to print an announcement.) 
\end_layout

\begin_layout Standard
These requirements apply to the modified work as a whole.
 If identifiable sections of that work are not derived from the Program,
 and can be reasonably considered independent and separate works in themselves,
 then this License, and its terms, do not apply to those sections when you
 distribute them as separate works.
 But when you distribute the same sections as part of a whole which is a
 work based on the Program, the distribution of the whole must be on the
 terms of this License, whose permissions for other licensees extend to
 the entire whole, and thus to each and every part regardless of who wrote
 it.
 
\end_layout

\begin_layout Standard
Thus, it is not the intent of this section to claim rights or contest your
 rights to work written entirely by you; rather, the intent is to exercise
 the right to control the distribution of derivative or collective works
 based on the Program.
 
\end_layout

\begin_layout Standard
In addition, mere aggregation of another work not based on the Program with
 the Program (or with a work based on the Program) on a volume of a storage
 or distribution medium does not bring the other work under the scope of
 this License.
 
\end_layout

\end_deeper
\begin_layout Enumerate
You may copy and distribute the Program (or a work based on it, under Section
 2) in object code or executable form under the terms of Sections 1 and
 2 above provided that you also do one of the following: 
\end_layout

\begin_deeper
\begin_layout Enumerate
Accompany it with the complete corresponding machine-readable source code,
 which must be distributed under the terms of Sections 1 and 2 above on
 a medium customarily used for software interchange; or, 
\end_layout

\begin_layout Enumerate
Accompany it with a written offer, valid for at least three years, to give
 any third party, for a charge no more than your cost of physically performing
 source distribution, a complete machine-readable copy of the corresponding
 source code, to be distributed under the terms of Sections 1 and 2 above
 on a medium customarily used for software interchange; or, 
\end_layout

\begin_layout Enumerate
Accompany it with the information you received as to the offer to distribute
 corresponding source code.
 (This alternative is allowed only for noncommercial distribution and only
 if you received the program in object code or executable form with such
 an offer, in accord with Subsection b above.) 
\end_layout

\begin_layout Standard
The source code for a work means the preferred form of the work for making
 modifications to it.
 For an executable work, complete source code means all the source code
 for all modules it contains, plus any associated interface definition files,
 plus the scripts used to control compilation and installation of the executable.
 However, as a special exception, the source code distributed need not include
 anything that is normally distributed (in either source or binary form)
 with the major components (compiler, kernel, and so on) of the operating
 system on which the executable runs, unless that component itself accompanies
 the executable.
\end_layout

\begin_layout Standard
If distribution of executable or object code is made by offering access
 to copy from a designated place, then offering equivalent access to copy
 the source code from the same place counts as distribution of the source
 code, even though third parties are not compelled to copy the source along
 with the object code.
 
\end_layout

\end_deeper
\begin_layout Enumerate
You may not copy, modify, sublicense, or distribute the Program except as
 expressly provided under this License.
 Any attempt otherwise to copy, modify, sublicense or distribute the Program
 is void, and will automatically terminate your rights under this License.
 However, parties who have received copies, or rights, from you under this
 License will not have their licenses terminated so long as such parties
 remain in full compliance.
 
\end_layout

\begin_layout Enumerate
You are not required to accept this License, since you have not signed it.
 However, nothing else grants you permission to modify or distribute the
 Program or its derivative works.
 These actions are prohibited by law if you do not accept this License.
 Therefore, by modifying or distributing the Program (or any work based
 on the Program), you indicate your acceptance of this License to do so,
 and all its terms and conditions for copying, distributing or modifying
 the Program or works based on it.
 
\end_layout

\begin_layout Enumerate
Each time you redistribute the Program (or any work based on the Program),
 the recipient automatically receives a license from the original licensor
 to copy, distribute or modify the Program subject to these terms and conditions.
 You may not impose any further restrictions on the recipients' exercise
 of the rights granted herein.
 You are not responsible for enforcing compliance by third parties to this
 License.
 
\end_layout

\begin_layout Enumerate
If, as a consequence of a court judgment or allegation of patent infringement
 or for any other reason (not limited to patent issues), conditions are
 imposed on you (whether by court order, agreement or otherwise) that contradict
 the conditions of this License, they do not excuse you from the conditions
 of this License.
 If you cannot distribute so as to satisfy simultaneously your obligations
 under this License and any other pertinent obligations, then as a consequence
 you may not distribute the Program at all.
 For example, if a patent license would not permit royalty-free redistribution
 of the Program by all those who receive copies directly or indirectly through
 you, then the only way you could satisfy both it and this License would
 be to refrain entirely from distribution of the Program.
\end_layout

\begin_deeper
\begin_layout Standard
If any portion of this section is held invalid or unenforceable under any
 particular circumstance, the balance of the section is intended to apply
 and the section as a whole is intended to apply in other circumstances.
\end_layout

\begin_layout Standard
It is not the purpose of this section to induce you to infringe any patents
 or other property right claims or to contest validity of any such claims;
 this section has the sole purpose of protecting the integrity of the free
 software distribution system, which is implemented by public license practices.
 Many people have made generous contributions to the wide range of software
 distributed through that system in reliance on consistent application of
 that system; it is up to the author/donor to decide if he or she is willing
 to distribute software through any other system and a licensee cannot impose
 that choice.
 
\end_layout

\begin_layout Standard
This section is intended to make thoroughly clear what is believed to be
 a consequence of the rest of this License.
 
\end_layout

\end_deeper
\begin_layout Enumerate
If the distribution and/or use of the Program is restricted in certain countries
 either by patents or by copyrighted interfaces, the original copyright
 holder who places the Program under this License may add an explicit geographic
al distribution limitation excluding those countries, so that distribution
 is permitted only in or among countries not thus excluded.
 In such case, this License incorporates the limitation as if written in
 the body of this License.
 
\end_layout

\begin_layout Enumerate
The Free Software Foundation may publish revised and/or new versions of
 the General Public License from time to time.
 Such new versions will be similar in spirit to the present version, but
 may differ in detail to address new problems or concerns.
 
\end_layout

\begin_deeper
\begin_layout Standard
Each version is given a distinguishing version number.
 If the Program specifies a version number of this License which applies
 to it and ``any later version,'' you have the option of following the terms
 and conditions either of that version or of any later version published
 by the Free Software Foundation.
 If the Program does not specify a version number of this License, you may
 choose any version ever published by the Free Software Foundation.
\end_layout

\end_deeper
\begin_layout Enumerate
If you wish to incorporate parts of the Program into other free programs
 whose distribution conditions are different, write to the author to ask
 for permission.
 For software which is copyrighted by the Free Software Foundation, write
 to the Free Software Foundation; we sometimes make exceptions for this.
 Our decision will be guided by the two goals of preserving the free status
 of all derivatives of our free software and of promoting the sharing and
 reuse of software generally.
 
\end_layout

\begin_layout Subsection*
NO WARRANTY 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
item[11.]
\end_layout

\end_inset

BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR
 THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.
 EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER
 PARTIES PROVIDE THE PROGRAM ``AS IS'' WITHOUT WARRANTY OF ANY KIND, EITHER
 EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH
 YOU.
 SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY
 SERVICING, REPAIR OR CORRECTION.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
item[12.]
\end_layout

\end_inset

IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL
 ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE
 THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING
 ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF
 THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS
 OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR
 THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
 EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY
 OF SUCH DAMAGES.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Section*
END OF TERMS AND CONDITIONS 
\end_layout

\begin_layout Subsection*
How to Apply These Terms to Your New Programs
\end_layout

\begin_layout Standard
If you develop a new program, and you want it to be of the greatest possible
 use to the public, the best way to achieve this is to make it free software
 which everyone can redistribute and change under these terms.
 
\end_layout

\begin_layout Standard
To do so, attach the following notices to the program.
 It is safest to attach them to the start of each source file to most effectivel
y convey the exclusion of warranty; and each file should have at least the
 ``copyright'' line and a pointer to where the full notice is found.
 For example:
\end_layout

\begin_layout Quote
One line to give the program's name and a brief idea of what it does.
 Copyright 
\size footnotesize
Â© (
\size default
year) (name of author) 
\end_layout

\begin_layout Quote
This program is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the Free
 Software Foundation; either version 2 of the License, or (at your option)
 any later version.
 
\end_layout

\begin_layout Quote
This program is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
 
\end_layout

\begin_layout Quote
You should have received a copy of the GNU General Public License along
 with this program; if not, write to the Free Software Foundation, Inc.,
 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA 
\end_layout

\begin_layout Standard
Also add information on how to contact you by electronic and paper mail.
 
\end_layout

\begin_layout Standard
If the program is interactive, make it output a short notice like this when
 it starts in an interactive mode: 
\end_layout

\begin_layout Quote
Gnomovision version 69, Copyright Â© year name of author Gnomovision comes
 with ABSOLUTELY NO WARRANTY; for details type `show w'.
 This is free software, and you are welcome to redistribute it under certain
 conditions; type `show c' for details.
 
\end_layout

\begin_layout Standard
The hypothetical commands `show w' and `show c' should show the appropriate
 parts of the General Public License.
 Of course, the commands you use may be called something other than `show
 w' and `show c'; they could even be mouse-clicks or menu items -- whatever
 suits your program.
 
\end_layout

\begin_layout Standard
You should also get your employer (if you work as a programmer) or your
 school, if any, to sign a ``copyright disclaimer'' for the program, if
 necessary.
 Here is a sample; alter the names: 
\end_layout

\begin_layout Quote
Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovisi
on' (which makes passes at compilers) written by James Hacker.
 
\end_layout

\begin_layout Quote
(signature of Ty Coon)
\begin_inset Newline newline
\end_inset

1 April 1989 
\begin_inset Newline newline
\end_inset

Ty Coon, President of Vice 
\end_layout

\begin_layout Standard
This General Public License does not permit incorporating your program into
 proprietary programs.
 If your program is a subroutine library, you may consider it more useful
 to permit linking proprietary applications with the library.
 If this is what you want to do, use the GNU Library General Public License
 instead of this License.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "1"
key "MartCund1982"

\end_inset

Marti, J.
 and P.
 Cundall (1982), Mixed discretization procecure for accurate modelling of
 plastic collapse.
 
\emph on
Int.
 J.
 Numer.
 Anal.
 Methods Geomech., 6,
\emph default
 129-139.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "2"
key "Cundall1989"

\end_inset

Cundall, P.
 (1989), Numerical experiments on localization in frictional materials.
 
\emph on
Ingenieur Archiv
\emph default
.,
\emph on
 58, 
\emph default
148-159.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "3"
key "Wilkins1964"

\end_inset

Wilkins, M.L.
 (1964), Calculation of elastic-plastic flow, 
\emph on
Meth.
 Comput.
 Phys., 3,
\emph default
 211-263.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "4"
key "Needleman1988"

\end_inset

Needleman, A.
 (1988), Material rate dependence and mesh sensitivity in localization problems.
 
\emph on
Comp.
 Meth.
 App.
 Mech.
 Eng., 67, 
\emph default
69-85.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "5"
key "OrtiSimo1986"

\end_inset

Ortiz, M.
 and J.C.
 Simo (1986), An analysis of a new class of integration algorithms for elastopla
stic constitutive relations.
 
\emph on
Int.
 J.
 Num.
 Meth.
 Eng., 23, 
\emph default
353-366.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "6"
key "OrtiQuig1991"

\end_inset

Ortiz, M.
 and J.J.
 Quigley (1991), Adaptive mesh refinement in strain localization problems.

\emph on
 Comput.
 Methods Appl.
 Mech.
 Engrg., 90
\emph default
, 781-804.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "7"
key "Quen_etal2005"

\end_inset

Quenette, S., B.
 Appelbe, M.
 Gurnis, L.
 Hodkinson, L.
 Moresi, and P.
 Sunter (2005), An investigation into design for performace and code maintainabi
lity in high performance computing.
 
\emph on
ANZIAM J.
 46 
\emph default
(E), C101âC116.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "8"
key "Tan_etal2004"

\end_inset

Tan, E., E.
 Choi, P.
 Thoutireddy, M.
 Gurnis, and M.
 Aivazis (2004), GeoFramework: Coupling multiple models of mantle convection
 within a computational framework, 
\emph on
Geochem.
 Geophys.
 Geosyst., 7
\emph default
, Q06001, doi:10.1029/2005GC001155.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "9"
key "Jaeger_1969"

\end_inset

Jaeger, J.C.
 (1969), 
\emph on
Elasticity, Fracture and Flow
\emph default
, 3rd Ed.
 New York: John Wiley & Sons, Inc.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "10"
key "Zien_etal1995"

\end_inset

 Zienkiewicz, O.C., M.
 Huang, and M.
 Pastor (1995), Localization problems in plasticity using finite elements
 with adaptive remeshing, 
\emph on
Int.
 J.
 Numer.
 Anal.
 Methods Geomech., 19,
\emph default
 127-148.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "11"
key "Bathe_1996"

\end_inset

Bathe, K.-J.
 (1996)
\emph on
, Finite Element Procedure.

\emph default
 Upper Saddle River, NJ: Prentice-Hall.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "12"
key "Albe_etal2000"

\end_inset

Albert, R., R.
 Phillips, A.
 Dombard, and C.
 Brown (2000), A test of the validity of yield strength envelope with an
 elastoviscoplastic finite element model.

\emph on
 Geophys.
 J.
 Int., 140
\emph default
, 399-409.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "13"
key "Poli_etal1993a"

\end_inset

Poliakov, A.N.B., P.A.
 Cundall, Y.Y.
 Podladchikov, and V.A.
 Lyakhovsky (1993), An explicit inertial method for the simulation of viscoelast
ic flow: An evaluation of elastic effects on diapiric flow in two- and three-lay
ers models.
 
\emph on
Flow and Creep in the Solar Systems: Observations, Modeling and Theory
\emph default
, Kluwer Academic Publishers, 175-195.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "14"
key "SimoHugh2004"

\end_inset

Simo, J.
 and T.
 Hughes (2004), 
\emph on
Computational Inelasticity.

\emph default
 New York: Springer.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "15"
key "RudnRice1975"

\end_inset

Rudnicki, J.
 and J.
 Rice (1975), Conditions for the localization of deformation in pressure-sensiti
ve dilatant materials, 
\emph on
J.
 Mech.
 Phys.
 Solids., 23
\emph default
, 371-394.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "16"
key "Cundall_1987"

\end_inset

Cundall, P.A.
 (1987), Distinct Element Models of Rock and Soil Structure, in 
\emph on
Analytical and Computational Methods in Engineering Rock Mechanics
\emph default
, Chapter 4, pp.
 129-163.
 E.T.
 Brown, Ed.
 London: George Allen.
 & Unwin.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "17"
key "ZienZhu1992"

\end_inset

Zienkiewicz, O.C.
 and Zhu, J.Z.
 (1992), The superconvergent patch recovery and 
\emph on
a posteriori
\emph default
 error estimates.
 Part 1: The recovery technique.
 
\shape italic
Int.
 J.
 Num.
 Meth.
 Engng.
\shape default
, 
\shape italic
33
\shape default
, 1331-1364.
\end_layout

\end_body
\end_document
